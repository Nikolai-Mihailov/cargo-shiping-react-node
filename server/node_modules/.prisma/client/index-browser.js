
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.21.2
 * Query Engine version: e421996c87d5f3c8f7eeadd502d4ad402c89464d
 */
Prisma.prismaVersion = {
  client: "2.21.2",
  engine: "e421996c87d5f3c8f7eeadd502d4ad402c89464d"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.CargosScalarFieldEnum = makeEnum({
  cargo_id: 'cargo_id',
  user_id: 'user_id',
  country_from: 'country_from',
  country_to: 'country_to',
  city_from: 'city_from',
  city_to: 'city_to',
  address_from: 'address_from',
  address_to: 'address_to',
  loading_date: 'loading_date',
  delivery_date: 'delivery_date',
  circular_course: 'circular_course',
  weight: 'weight',
  size: 'size',
  cargo_type: 'cargo_type',
  vehicle_type: 'vehicle_type',
  registered: 'registered'
});

exports.Prisma.CompaniesScalarFieldEnum = makeEnum({
  company_id: 'company_id',
  user_id: 'user_id',
  company_name: 'company_name',
  country: 'country',
  city: 'city',
  street: 'street',
  owner_first_name: 'owner_first_name',
  owner_last_name: 'owner_last_name',
  phone: 'phone',
  registrationDate: 'registrationDate',
  expirationDate: 'expirationDate',
  business_type: 'business_type',
  eik: 'eik',
  postcode: 'postcode'
});

exports.Prisma.Company_accountsScalarFieldEnum = makeEnum({
  account_id: 'account_id',
  company_id: 'company_id',
  group_id: 'group_id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  phone: 'phone',
  registration_date: 'registration_date',
  expiration_date: 'expiration_date'
});

exports.Prisma.SubscriptionsScalarFieldEnum = makeEnum({
  subscription_id: 'subscription_id',
  company_id: 'company_id',
  subscription_type: 'subscription_type',
  status: 'status',
  registration_date: 'registration_date',
  expiration_date: 'expiration_date'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password'
});

exports.Prisma.Users_groupsScalarFieldEnum = makeEnum({
  group_id: 'group_id',
  group_name: 'group_name',
  group_description: 'group_description'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  cargos: 'cargos',
  companies: 'companies',
  company_accounts: 'company_accounts',
  subscriptions: 'subscriptions',
  users: 'users',
  users_groups: 'users_groups'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
