
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model cargos
 */

export type cargos = {
  cargo_id: number
  user_id: number
  country_from: string
  country_to: string
  city_from: string
  city_to: string
  address_from: string
  address_to: string
  loading_date: Date
  delivery_date: Date
  circular_course: number
  weight: number
  size: number
  cargo_type: string
  vehicle_type: string
  registered: Date
}

/**
 * Model companies
 */

export type companies = {
  company_id: number
  user_id: number
  company_name: string
  country: string
  city: string
  street: string
  owner_first_name: string
  owner_last_name: string
  phone: number
  registrationDate: Date
  expirationDate: Date
  business_type: string
  eik: number
  postcode: string
}

/**
 * Model company_accounts
 */

export type company_accounts = {
  account_id: number
  company_id: number
  group_id: number
  first_name: string
  last_name: string
  email: string
  phone: number
  registration_date: Date
  expiration_date: Date
}

/**
 * Model subscriptions
 */

export type subscriptions = {
  subscription_id: number
  company_id: number
  subscription_type: string
  status: string
  registration_date: Date
  expiration_date: Date
}

/**
 * Model users
 */

export type users = {
  id: number
  username: string
  email: string
  password: string
}

/**
 * Model users_groups
 */

export type users_groups = {
  group_id: number
  group_name: string
  group_description: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cargos
 * const cargos = await prisma.cargos.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cargos
   * const cargos = await prisma.cargos.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.cargos`: Exposes CRUD operations for the **cargos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cargos
    * const cargos = await prisma.cargos.findMany()
    * ```
    */
  get cargos(): Prisma.cargosDelegate<GlobalReject>;

  /**
   * `prisma.companies`: Exposes CRUD operations for the **companies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.companies.findMany()
    * ```
    */
  get companies(): Prisma.companiesDelegate<GlobalReject>;

  /**
   * `prisma.company_accounts`: Exposes CRUD operations for the **company_accounts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Company_accounts
    * const company_accounts = await prisma.company_accounts.findMany()
    * ```
    */
  get company_accounts(): Prisma.company_accountsDelegate<GlobalReject>;

  /**
   * `prisma.subscriptions`: Exposes CRUD operations for the **subscriptions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscriptions.findMany()
    * ```
    */
  get subscriptions(): Prisma.subscriptionsDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.users_groups`: Exposes CRUD operations for the **users_groups** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users_groups
    * const users_groups = await prisma.users_groups.findMany()
    * ```
    */
  get users_groups(): Prisma.users_groupsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.21.2
   * Query Engine version: e421996c87d5f3c8f7eeadd502d4ad402c89464d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    cargos: 'cargos',
    companies: 'companies',
    company_accounts: 'company_accounts',
    subscriptions: 'subscriptions',
    users: 'users',
    users_groups: 'users_groups'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model cargos
   */


  export type AggregateCargos = {
    count: CargosCountAggregateOutputType | null
    avg: CargosAvgAggregateOutputType | null
    sum: CargosSumAggregateOutputType | null
    min: CargosMinAggregateOutputType | null
    max: CargosMaxAggregateOutputType | null
  }

  export type CargosAvgAggregateOutputType = {
    cargo_id: number | null
    user_id: number | null
    circular_course: number | null
    weight: number | null
    size: number | null
  }

  export type CargosSumAggregateOutputType = {
    cargo_id: number | null
    user_id: number | null
    circular_course: number | null
    weight: number | null
    size: number | null
  }

  export type CargosMinAggregateOutputType = {
    cargo_id: number | null
    user_id: number | null
    country_from: string | null
    country_to: string | null
    city_from: string | null
    city_to: string | null
    address_from: string | null
    address_to: string | null
    loading_date: Date | null
    delivery_date: Date | null
    circular_course: number | null
    weight: number | null
    size: number | null
    cargo_type: string | null
    vehicle_type: string | null
    registered: Date | null
  }

  export type CargosMaxAggregateOutputType = {
    cargo_id: number | null
    user_id: number | null
    country_from: string | null
    country_to: string | null
    city_from: string | null
    city_to: string | null
    address_from: string | null
    address_to: string | null
    loading_date: Date | null
    delivery_date: Date | null
    circular_course: number | null
    weight: number | null
    size: number | null
    cargo_type: string | null
    vehicle_type: string | null
    registered: Date | null
  }

  export type CargosCountAggregateOutputType = {
    cargo_id: number
    user_id: number
    country_from: number
    country_to: number
    city_from: number
    city_to: number
    address_from: number
    address_to: number
    loading_date: number
    delivery_date: number
    circular_course: number
    weight: number
    size: number
    cargo_type: number
    vehicle_type: number
    registered: number
    _all: number
  }


  export type CargosAvgAggregateInputType = {
    cargo_id?: true
    user_id?: true
    circular_course?: true
    weight?: true
    size?: true
  }

  export type CargosSumAggregateInputType = {
    cargo_id?: true
    user_id?: true
    circular_course?: true
    weight?: true
    size?: true
  }

  export type CargosMinAggregateInputType = {
    cargo_id?: true
    user_id?: true
    country_from?: true
    country_to?: true
    city_from?: true
    city_to?: true
    address_from?: true
    address_to?: true
    loading_date?: true
    delivery_date?: true
    circular_course?: true
    weight?: true
    size?: true
    cargo_type?: true
    vehicle_type?: true
    registered?: true
  }

  export type CargosMaxAggregateInputType = {
    cargo_id?: true
    user_id?: true
    country_from?: true
    country_to?: true
    city_from?: true
    city_to?: true
    address_from?: true
    address_to?: true
    loading_date?: true
    delivery_date?: true
    circular_course?: true
    weight?: true
    size?: true
    cargo_type?: true
    vehicle_type?: true
    registered?: true
  }

  export type CargosCountAggregateInputType = {
    cargo_id?: true
    user_id?: true
    country_from?: true
    country_to?: true
    city_from?: true
    city_to?: true
    address_from?: true
    address_to?: true
    loading_date?: true
    delivery_date?: true
    circular_course?: true
    weight?: true
    size?: true
    cargo_type?: true
    vehicle_type?: true
    registered?: true
    _all?: true
  }

  export type CargosAggregateArgs = {
    /**
     * Filter which cargos to aggregate.
    **/
    where?: cargosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cargos to fetch.
    **/
    orderBy?: Enumerable<cargosOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: cargosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cargos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cargos.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cargos
    **/
    count?: true | CargosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CargosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CargosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CargosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CargosMaxAggregateInputType
  }

  export type GetCargosAggregateType<T extends CargosAggregateArgs> = {
    [P in keyof T & keyof AggregateCargos]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCargos[P]>
      : GetScalarType<T[P], AggregateCargos[P]>
  }


    
    
  export type CargosGroupByArgs = {
    where?: cargosWhereInput
    orderBy?: Enumerable<cargosOrderByInput>
    by: Array<CargosScalarFieldEnum>
    having?: cargosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: CargosCountAggregateInputType | true
    avg?: CargosAvgAggregateInputType
    sum?: CargosSumAggregateInputType
    min?: CargosMinAggregateInputType
    max?: CargosMaxAggregateInputType
  }


  export type CargosGroupByOutputType = {
    cargo_id: number
    user_id: number
    country_from: string
    country_to: string
    city_from: string
    city_to: string
    address_from: string
    address_to: string
    loading_date: Date
    delivery_date: Date
    circular_course: number
    weight: number
    size: number
    cargo_type: string
    vehicle_type: string
    registered: Date
    count: CargosCountAggregateOutputType | null
    avg: CargosAvgAggregateOutputType | null
    sum: CargosSumAggregateOutputType | null
    min: CargosMinAggregateOutputType | null
    max: CargosMaxAggregateOutputType | null
  }

  type GetCargosGroupByPayload<T extends CargosGroupByArgs> = Promise<Array<
    PickArray<CargosGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof CargosGroupByOutputType))]: GetScalarType<T[P], CargosGroupByOutputType[P]>
    }
  >>
    

  export type cargosSelect = {
    cargo_id?: boolean
    user_id?: boolean
    country_from?: boolean
    country_to?: boolean
    city_from?: boolean
    city_to?: boolean
    address_from?: boolean
    address_to?: boolean
    loading_date?: boolean
    delivery_date?: boolean
    circular_course?: boolean
    weight?: boolean
    size?: boolean
    cargo_type?: boolean
    vehicle_type?: boolean
    registered?: boolean
  }

  export type cargosGetPayload<
    S extends boolean | null | undefined | cargosArgs,
    U = keyof S
      > = S extends true
        ? cargos
    : S extends undefined
    ? never
    : S extends cargosArgs | cargosFindManyArgs
    ?'include' extends U
    ? cargos 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof cargos ?cargos [P]
  : 
     never
  } 
    : cargos
  : cargos


  type cargosCountArgs = Merge<
    Omit<cargosFindManyArgs, 'select' | 'include'> & {
      select?: CargosCountAggregateInputType | true
    }
  >

  export interface cargosDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Cargos that matches the filter.
     * @param {cargosFindUniqueArgs} args - Arguments to find a Cargos
     * @example
     * // Get one Cargos
     * const cargos = await prisma.cargos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cargosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, cargosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'cargos'> extends True ? CheckSelect<T, Prisma__cargosClient<cargos>, Prisma__cargosClient<cargosGetPayload<T>>> : CheckSelect<T, Prisma__cargosClient<cargos | null >, Prisma__cargosClient<cargosGetPayload<T> | null >>

    /**
     * Find the first Cargos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cargosFindFirstArgs} args - Arguments to find a Cargos
     * @example
     * // Get one Cargos
     * const cargos = await prisma.cargos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cargosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, cargosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'cargos'> extends True ? CheckSelect<T, Prisma__cargosClient<cargos>, Prisma__cargosClient<cargosGetPayload<T>>> : CheckSelect<T, Prisma__cargosClient<cargos | null >, Prisma__cargosClient<cargosGetPayload<T> | null >>

    /**
     * Find zero or more Cargos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cargosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cargos
     * const cargos = await prisma.cargos.findMany()
     * 
     * // Get first 10 Cargos
     * const cargos = await prisma.cargos.findMany({ take: 10 })
     * 
     * // Only select the `cargo_id`
     * const cargosWithCargo_idOnly = await prisma.cargos.findMany({ select: { cargo_id: true } })
     * 
    **/
    findMany<T extends cargosFindManyArgs>(
      args?: SelectSubset<T, cargosFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<cargos>>, PrismaPromise<Array<cargosGetPayload<T>>>>

    /**
     * Create a Cargos.
     * @param {cargosCreateArgs} args - Arguments to create a Cargos.
     * @example
     * // Create one Cargos
     * const Cargos = await prisma.cargos.create({
     *   data: {
     *     // ... data to create a Cargos
     *   }
     * })
     * 
    **/
    create<T extends cargosCreateArgs>(
      args: SelectSubset<T, cargosCreateArgs>
    ): CheckSelect<T, Prisma__cargosClient<cargos>, Prisma__cargosClient<cargosGetPayload<T>>>

    /**
     * Create many Cargos.
     *     @param {cargosCreateManyArgs} args - Arguments to create many Cargos.
     *     @example
     *     // Create many Cargos
     *     const cargos = await prisma.cargos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cargosCreateManyArgs>(
      args?: SelectSubset<T, cargosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cargos.
     * @param {cargosDeleteArgs} args - Arguments to delete one Cargos.
     * @example
     * // Delete one Cargos
     * const Cargos = await prisma.cargos.delete({
     *   where: {
     *     // ... filter to delete one Cargos
     *   }
     * })
     * 
    **/
    delete<T extends cargosDeleteArgs>(
      args: SelectSubset<T, cargosDeleteArgs>
    ): CheckSelect<T, Prisma__cargosClient<cargos>, Prisma__cargosClient<cargosGetPayload<T>>>

    /**
     * Update one Cargos.
     * @param {cargosUpdateArgs} args - Arguments to update one Cargos.
     * @example
     * // Update one Cargos
     * const cargos = await prisma.cargos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cargosUpdateArgs>(
      args: SelectSubset<T, cargosUpdateArgs>
    ): CheckSelect<T, Prisma__cargosClient<cargos>, Prisma__cargosClient<cargosGetPayload<T>>>

    /**
     * Delete zero or more Cargos.
     * @param {cargosDeleteManyArgs} args - Arguments to filter Cargos to delete.
     * @example
     * // Delete a few Cargos
     * const { count } = await prisma.cargos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cargosDeleteManyArgs>(
      args?: SelectSubset<T, cargosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cargos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cargosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cargos
     * const cargos = await prisma.cargos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cargosUpdateManyArgs>(
      args: SelectSubset<T, cargosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cargos.
     * @param {cargosUpsertArgs} args - Arguments to update or create a Cargos.
     * @example
     * // Update or create a Cargos
     * const cargos = await prisma.cargos.upsert({
     *   create: {
     *     // ... data to create a Cargos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cargos we want to update
     *   }
     * })
    **/
    upsert<T extends cargosUpsertArgs>(
      args: SelectSubset<T, cargosUpsertArgs>
    ): CheckSelect<T, Prisma__cargosClient<cargos>, Prisma__cargosClient<cargosGetPayload<T>>>

    /**
     * Count the number of Cargos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cargosCountArgs} args - Arguments to filter Cargos to count.
     * @example
     * // Count the number of Cargos
     * const count = await prisma.cargos.count({
     *   where: {
     *     // ... the filter for the Cargos we want to count
     *   }
     * })
    **/
    count<T extends cargosCountArgs>(
      args?: Subset<T, cargosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CargosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cargos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CargosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CargosAggregateArgs>(args: Subset<T, CargosAggregateArgs>): PrismaPromise<GetCargosAggregateType<T>>

    /**
     * Group by Cargos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CargosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CargosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CargosGroupByArgs['orderBy'] }
        : { orderBy?: CargosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CargosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCargosGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for cargos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__cargosClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * cargos findUnique
   */
  export type cargosFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the cargos
    **/
    select?: cargosSelect | null
    /**
     * Throw an Error if a cargos can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which cargos to fetch.
    **/
    where: cargosWhereUniqueInput
  }


  /**
   * cargos findFirst
   */
  export type cargosFindFirstArgs = {
    /**
     * Select specific fields to fetch from the cargos
    **/
    select?: cargosSelect | null
    /**
     * Throw an Error if a cargos can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which cargos to fetch.
    **/
    where?: cargosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cargos to fetch.
    **/
    orderBy?: Enumerable<cargosOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cargos.
    **/
    cursor?: cargosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cargos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cargos.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cargos.
    **/
    distinct?: Enumerable<CargosScalarFieldEnum>
  }


  /**
   * cargos findMany
   */
  export type cargosFindManyArgs = {
    /**
     * Select specific fields to fetch from the cargos
    **/
    select?: cargosSelect | null
    /**
     * Filter, which cargos to fetch.
    **/
    where?: cargosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cargos to fetch.
    **/
    orderBy?: Enumerable<cargosOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cargos.
    **/
    cursor?: cargosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cargos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cargos.
    **/
    skip?: number
    distinct?: Enumerable<CargosScalarFieldEnum>
  }


  /**
   * cargos create
   */
  export type cargosCreateArgs = {
    /**
     * Select specific fields to fetch from the cargos
    **/
    select?: cargosSelect | null
    /**
     * The data needed to create a cargos.
    **/
    data: XOR<cargosCreateInput, cargosUncheckedCreateInput>
  }


  /**
   * cargos createMany
   */
  export type cargosCreateManyArgs = {
    data: Enumerable<cargosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * cargos update
   */
  export type cargosUpdateArgs = {
    /**
     * Select specific fields to fetch from the cargos
    **/
    select?: cargosSelect | null
    /**
     * The data needed to update a cargos.
    **/
    data: XOR<cargosUpdateInput, cargosUncheckedUpdateInput>
    /**
     * Choose, which cargos to update.
    **/
    where: cargosWhereUniqueInput
  }


  /**
   * cargos updateMany
   */
  export type cargosUpdateManyArgs = {
    data: XOR<cargosUpdateManyMutationInput, cargosUncheckedUpdateManyInput>
    where?: cargosWhereInput
  }


  /**
   * cargos upsert
   */
  export type cargosUpsertArgs = {
    /**
     * Select specific fields to fetch from the cargos
    **/
    select?: cargosSelect | null
    /**
     * The filter to search for the cargos to update in case it exists.
    **/
    where: cargosWhereUniqueInput
    /**
     * In case the cargos found by the `where` argument doesn't exist, create a new cargos with this data.
    **/
    create: XOR<cargosCreateInput, cargosUncheckedCreateInput>
    /**
     * In case the cargos was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<cargosUpdateInput, cargosUncheckedUpdateInput>
  }


  /**
   * cargos delete
   */
  export type cargosDeleteArgs = {
    /**
     * Select specific fields to fetch from the cargos
    **/
    select?: cargosSelect | null
    /**
     * Filter which cargos to delete.
    **/
    where: cargosWhereUniqueInput
  }


  /**
   * cargos deleteMany
   */
  export type cargosDeleteManyArgs = {
    where?: cargosWhereInput
  }


  /**
   * cargos without action
   */
  export type cargosArgs = {
    /**
     * Select specific fields to fetch from the cargos
    **/
    select?: cargosSelect | null
  }



  /**
   * Model companies
   */


  export type AggregateCompanies = {
    count: CompaniesCountAggregateOutputType | null
    avg: CompaniesAvgAggregateOutputType | null
    sum: CompaniesSumAggregateOutputType | null
    min: CompaniesMinAggregateOutputType | null
    max: CompaniesMaxAggregateOutputType | null
  }

  export type CompaniesAvgAggregateOutputType = {
    company_id: number | null
    user_id: number | null
    phone: number | null
    eik: number | null
  }

  export type CompaniesSumAggregateOutputType = {
    company_id: number | null
    user_id: number | null
    phone: number | null
    eik: number | null
  }

  export type CompaniesMinAggregateOutputType = {
    company_id: number | null
    user_id: number | null
    company_name: string | null
    country: string | null
    city: string | null
    street: string | null
    owner_first_name: string | null
    owner_last_name: string | null
    phone: number | null
    registrationDate: Date | null
    expirationDate: Date | null
    business_type: string | null
    eik: number | null
    postcode: string | null
  }

  export type CompaniesMaxAggregateOutputType = {
    company_id: number | null
    user_id: number | null
    company_name: string | null
    country: string | null
    city: string | null
    street: string | null
    owner_first_name: string | null
    owner_last_name: string | null
    phone: number | null
    registrationDate: Date | null
    expirationDate: Date | null
    business_type: string | null
    eik: number | null
    postcode: string | null
  }

  export type CompaniesCountAggregateOutputType = {
    company_id: number
    user_id: number
    company_name: number
    country: number
    city: number
    street: number
    owner_first_name: number
    owner_last_name: number
    phone: number
    registrationDate: number
    expirationDate: number
    business_type: number
    eik: number
    postcode: number
    _all: number
  }


  export type CompaniesAvgAggregateInputType = {
    company_id?: true
    user_id?: true
    phone?: true
    eik?: true
  }

  export type CompaniesSumAggregateInputType = {
    company_id?: true
    user_id?: true
    phone?: true
    eik?: true
  }

  export type CompaniesMinAggregateInputType = {
    company_id?: true
    user_id?: true
    company_name?: true
    country?: true
    city?: true
    street?: true
    owner_first_name?: true
    owner_last_name?: true
    phone?: true
    registrationDate?: true
    expirationDate?: true
    business_type?: true
    eik?: true
    postcode?: true
  }

  export type CompaniesMaxAggregateInputType = {
    company_id?: true
    user_id?: true
    company_name?: true
    country?: true
    city?: true
    street?: true
    owner_first_name?: true
    owner_last_name?: true
    phone?: true
    registrationDate?: true
    expirationDate?: true
    business_type?: true
    eik?: true
    postcode?: true
  }

  export type CompaniesCountAggregateInputType = {
    company_id?: true
    user_id?: true
    company_name?: true
    country?: true
    city?: true
    street?: true
    owner_first_name?: true
    owner_last_name?: true
    phone?: true
    registrationDate?: true
    expirationDate?: true
    business_type?: true
    eik?: true
    postcode?: true
    _all?: true
  }

  export type CompaniesAggregateArgs = {
    /**
     * Filter which companies to aggregate.
    **/
    where?: companiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
    **/
    orderBy?: Enumerable<companiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: companiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned companies
    **/
    count?: true | CompaniesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CompaniesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CompaniesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CompaniesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CompaniesMaxAggregateInputType
  }

  export type GetCompaniesAggregateType<T extends CompaniesAggregateArgs> = {
    [P in keyof T & keyof AggregateCompanies]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanies[P]>
      : GetScalarType<T[P], AggregateCompanies[P]>
  }


    
    
  export type CompaniesGroupByArgs = {
    where?: companiesWhereInput
    orderBy?: Enumerable<companiesOrderByInput>
    by: Array<CompaniesScalarFieldEnum>
    having?: companiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: CompaniesCountAggregateInputType | true
    avg?: CompaniesAvgAggregateInputType
    sum?: CompaniesSumAggregateInputType
    min?: CompaniesMinAggregateInputType
    max?: CompaniesMaxAggregateInputType
  }


  export type CompaniesGroupByOutputType = {
    company_id: number
    user_id: number
    company_name: string
    country: string
    city: string
    street: string
    owner_first_name: string
    owner_last_name: string
    phone: number
    registrationDate: Date
    expirationDate: Date
    business_type: string
    eik: number
    postcode: string
    count: CompaniesCountAggregateOutputType | null
    avg: CompaniesAvgAggregateOutputType | null
    sum: CompaniesSumAggregateOutputType | null
    min: CompaniesMinAggregateOutputType | null
    max: CompaniesMaxAggregateOutputType | null
  }

  type GetCompaniesGroupByPayload<T extends CompaniesGroupByArgs> = Promise<Array<
    PickArray<CompaniesGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof CompaniesGroupByOutputType))]: GetScalarType<T[P], CompaniesGroupByOutputType[P]>
    }
  >>
    

  export type companiesSelect = {
    company_id?: boolean
    user_id?: boolean
    company_name?: boolean
    country?: boolean
    city?: boolean
    street?: boolean
    owner_first_name?: boolean
    owner_last_name?: boolean
    phone?: boolean
    registrationDate?: boolean
    expirationDate?: boolean
    business_type?: boolean
    eik?: boolean
    postcode?: boolean
    users?: boolean | usersArgs
    subscriptions?: boolean | subscriptionsArgs
  }

  export type companiesInclude = {
    users?: boolean | usersArgs
    subscriptions?: boolean | subscriptionsArgs
  }

  export type companiesGetPayload<
    S extends boolean | null | undefined | companiesArgs,
    U = keyof S
      > = S extends true
        ? companies
    : S extends undefined
    ? never
    : S extends companiesArgs | companiesFindManyArgs
    ?'include' extends U
    ? companies  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? usersGetPayload<S['include'][P]> :
        P extends 'subscriptions'
        ? subscriptionsGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof companies ?companies [P]
  : 
          P extends 'users'
        ? usersGetPayload<S['select'][P]> :
        P extends 'subscriptions'
        ? subscriptionsGetPayload<S['select'][P]> | null : never
  } 
    : companies
  : companies


  type companiesCountArgs = Merge<
    Omit<companiesFindManyArgs, 'select' | 'include'> & {
      select?: CompaniesCountAggregateInputType | true
    }
  >

  export interface companiesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Companies that matches the filter.
     * @param {companiesFindUniqueArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends companiesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, companiesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'companies'> extends True ? CheckSelect<T, Prisma__companiesClient<companies>, Prisma__companiesClient<companiesGetPayload<T>>> : CheckSelect<T, Prisma__companiesClient<companies | null >, Prisma__companiesClient<companiesGetPayload<T> | null >>

    /**
     * Find the first Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesFindFirstArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends companiesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, companiesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'companies'> extends True ? CheckSelect<T, Prisma__companiesClient<companies>, Prisma__companiesClient<companiesGetPayload<T>>> : CheckSelect<T, Prisma__companiesClient<companies | null >, Prisma__companiesClient<companiesGetPayload<T> | null >>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.companies.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.companies.findMany({ take: 10 })
     * 
     * // Only select the `company_id`
     * const companiesWithCompany_idOnly = await prisma.companies.findMany({ select: { company_id: true } })
     * 
    **/
    findMany<T extends companiesFindManyArgs>(
      args?: SelectSubset<T, companiesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<companies>>, PrismaPromise<Array<companiesGetPayload<T>>>>

    /**
     * Create a Companies.
     * @param {companiesCreateArgs} args - Arguments to create a Companies.
     * @example
     * // Create one Companies
     * const Companies = await prisma.companies.create({
     *   data: {
     *     // ... data to create a Companies
     *   }
     * })
     * 
    **/
    create<T extends companiesCreateArgs>(
      args: SelectSubset<T, companiesCreateArgs>
    ): CheckSelect<T, Prisma__companiesClient<companies>, Prisma__companiesClient<companiesGetPayload<T>>>

    /**
     * Create many Companies.
     *     @param {companiesCreateManyArgs} args - Arguments to create many Companies.
     *     @example
     *     // Create many Companies
     *     const companies = await prisma.companies.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends companiesCreateManyArgs>(
      args?: SelectSubset<T, companiesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Companies.
     * @param {companiesDeleteArgs} args - Arguments to delete one Companies.
     * @example
     * // Delete one Companies
     * const Companies = await prisma.companies.delete({
     *   where: {
     *     // ... filter to delete one Companies
     *   }
     * })
     * 
    **/
    delete<T extends companiesDeleteArgs>(
      args: SelectSubset<T, companiesDeleteArgs>
    ): CheckSelect<T, Prisma__companiesClient<companies>, Prisma__companiesClient<companiesGetPayload<T>>>

    /**
     * Update one Companies.
     * @param {companiesUpdateArgs} args - Arguments to update one Companies.
     * @example
     * // Update one Companies
     * const companies = await prisma.companies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends companiesUpdateArgs>(
      args: SelectSubset<T, companiesUpdateArgs>
    ): CheckSelect<T, Prisma__companiesClient<companies>, Prisma__companiesClient<companiesGetPayload<T>>>

    /**
     * Delete zero or more Companies.
     * @param {companiesDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.companies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends companiesDeleteManyArgs>(
      args?: SelectSubset<T, companiesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const companies = await prisma.companies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends companiesUpdateManyArgs>(
      args: SelectSubset<T, companiesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Companies.
     * @param {companiesUpsertArgs} args - Arguments to update or create a Companies.
     * @example
     * // Update or create a Companies
     * const companies = await prisma.companies.upsert({
     *   create: {
     *     // ... data to create a Companies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Companies we want to update
     *   }
     * })
    **/
    upsert<T extends companiesUpsertArgs>(
      args: SelectSubset<T, companiesUpsertArgs>
    ): CheckSelect<T, Prisma__companiesClient<companies>, Prisma__companiesClient<companiesGetPayload<T>>>

    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.companies.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends companiesCountArgs>(
      args?: Subset<T, companiesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompaniesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompaniesAggregateArgs>(args: Subset<T, CompaniesAggregateArgs>): PrismaPromise<GetCompaniesAggregateType<T>>

    /**
     * Group by Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompaniesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompaniesGroupByArgs['orderBy'] }
        : { orderBy?: CompaniesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompaniesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompaniesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for companies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__companiesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    subscriptions<T extends subscriptionsArgs = {}>(args?: Subset<T, subscriptionsArgs>): CheckSelect<T, Prisma__subscriptionsClient<subscriptions | null >, Prisma__subscriptionsClient<subscriptionsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * companies findUnique
   */
  export type companiesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
    /**
     * Throw an Error if a companies can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which companies to fetch.
    **/
    where: companiesWhereUniqueInput
  }


  /**
   * companies findFirst
   */
  export type companiesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
    /**
     * Throw an Error if a companies can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which companies to fetch.
    **/
    where?: companiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
    **/
    orderBy?: Enumerable<companiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for companies.
    **/
    cursor?: companiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of companies.
    **/
    distinct?: Enumerable<CompaniesScalarFieldEnum>
  }


  /**
   * companies findMany
   */
  export type companiesFindManyArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
    /**
     * Filter, which companies to fetch.
    **/
    where?: companiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
    **/
    orderBy?: Enumerable<companiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing companies.
    **/
    cursor?: companiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
    **/
    skip?: number
    distinct?: Enumerable<CompaniesScalarFieldEnum>
  }


  /**
   * companies create
   */
  export type companiesCreateArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
    /**
     * The data needed to create a companies.
    **/
    data: XOR<companiesCreateInput, companiesUncheckedCreateInput>
  }


  /**
   * companies createMany
   */
  export type companiesCreateManyArgs = {
    data: Enumerable<companiesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * companies update
   */
  export type companiesUpdateArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
    /**
     * The data needed to update a companies.
    **/
    data: XOR<companiesUpdateInput, companiesUncheckedUpdateInput>
    /**
     * Choose, which companies to update.
    **/
    where: companiesWhereUniqueInput
  }


  /**
   * companies updateMany
   */
  export type companiesUpdateManyArgs = {
    data: XOR<companiesUpdateManyMutationInput, companiesUncheckedUpdateManyInput>
    where?: companiesWhereInput
  }


  /**
   * companies upsert
   */
  export type companiesUpsertArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
    /**
     * The filter to search for the companies to update in case it exists.
    **/
    where: companiesWhereUniqueInput
    /**
     * In case the companies found by the `where` argument doesn't exist, create a new companies with this data.
    **/
    create: XOR<companiesCreateInput, companiesUncheckedCreateInput>
    /**
     * In case the companies was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<companiesUpdateInput, companiesUncheckedUpdateInput>
  }


  /**
   * companies delete
   */
  export type companiesDeleteArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
    /**
     * Filter which companies to delete.
    **/
    where: companiesWhereUniqueInput
  }


  /**
   * companies deleteMany
   */
  export type companiesDeleteManyArgs = {
    where?: companiesWhereInput
  }


  /**
   * companies without action
   */
  export type companiesArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
  }



  /**
   * Model company_accounts
   */


  export type AggregateCompany_accounts = {
    count: Company_accountsCountAggregateOutputType | null
    avg: Company_accountsAvgAggregateOutputType | null
    sum: Company_accountsSumAggregateOutputType | null
    min: Company_accountsMinAggregateOutputType | null
    max: Company_accountsMaxAggregateOutputType | null
  }

  export type Company_accountsAvgAggregateOutputType = {
    account_id: number | null
    company_id: number | null
    group_id: number | null
    phone: number | null
  }

  export type Company_accountsSumAggregateOutputType = {
    account_id: number | null
    company_id: number | null
    group_id: number | null
    phone: number | null
  }

  export type Company_accountsMinAggregateOutputType = {
    account_id: number | null
    company_id: number | null
    group_id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    phone: number | null
    registration_date: Date | null
    expiration_date: Date | null
  }

  export type Company_accountsMaxAggregateOutputType = {
    account_id: number | null
    company_id: number | null
    group_id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    phone: number | null
    registration_date: Date | null
    expiration_date: Date | null
  }

  export type Company_accountsCountAggregateOutputType = {
    account_id: number
    company_id: number
    group_id: number
    first_name: number
    last_name: number
    email: number
    phone: number
    registration_date: number
    expiration_date: number
    _all: number
  }


  export type Company_accountsAvgAggregateInputType = {
    account_id?: true
    company_id?: true
    group_id?: true
    phone?: true
  }

  export type Company_accountsSumAggregateInputType = {
    account_id?: true
    company_id?: true
    group_id?: true
    phone?: true
  }

  export type Company_accountsMinAggregateInputType = {
    account_id?: true
    company_id?: true
    group_id?: true
    first_name?: true
    last_name?: true
    email?: true
    phone?: true
    registration_date?: true
    expiration_date?: true
  }

  export type Company_accountsMaxAggregateInputType = {
    account_id?: true
    company_id?: true
    group_id?: true
    first_name?: true
    last_name?: true
    email?: true
    phone?: true
    registration_date?: true
    expiration_date?: true
  }

  export type Company_accountsCountAggregateInputType = {
    account_id?: true
    company_id?: true
    group_id?: true
    first_name?: true
    last_name?: true
    email?: true
    phone?: true
    registration_date?: true
    expiration_date?: true
    _all?: true
  }

  export type Company_accountsAggregateArgs = {
    /**
     * Filter which company_accounts to aggregate.
    **/
    where?: company_accountsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of company_accounts to fetch.
    **/
    orderBy?: Enumerable<company_accountsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: company_accountsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_accounts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_accounts.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned company_accounts
    **/
    count?: true | Company_accountsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Company_accountsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Company_accountsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Company_accountsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Company_accountsMaxAggregateInputType
  }

  export type GetCompany_accountsAggregateType<T extends Company_accountsAggregateArgs> = {
    [P in keyof T & keyof AggregateCompany_accounts]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany_accounts[P]>
      : GetScalarType<T[P], AggregateCompany_accounts[P]>
  }


    
    
  export type Company_accountsGroupByArgs = {
    where?: company_accountsWhereInput
    orderBy?: Enumerable<company_accountsOrderByInput>
    by: Array<Company_accountsScalarFieldEnum>
    having?: company_accountsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Company_accountsCountAggregateInputType | true
    avg?: Company_accountsAvgAggregateInputType
    sum?: Company_accountsSumAggregateInputType
    min?: Company_accountsMinAggregateInputType
    max?: Company_accountsMaxAggregateInputType
  }


  export type Company_accountsGroupByOutputType = {
    account_id: number
    company_id: number
    group_id: number
    first_name: string
    last_name: string
    email: string
    phone: number
    registration_date: Date
    expiration_date: Date
    count: Company_accountsCountAggregateOutputType | null
    avg: Company_accountsAvgAggregateOutputType | null
    sum: Company_accountsSumAggregateOutputType | null
    min: Company_accountsMinAggregateOutputType | null
    max: Company_accountsMaxAggregateOutputType | null
  }

  type GetCompany_accountsGroupByPayload<T extends Company_accountsGroupByArgs> = Promise<Array<
    PickArray<Company_accountsGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Company_accountsGroupByOutputType))]: GetScalarType<T[P], Company_accountsGroupByOutputType[P]>
    }
  >>
    

  export type company_accountsSelect = {
    account_id?: boolean
    company_id?: boolean
    group_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    phone?: boolean
    registration_date?: boolean
    expiration_date?: boolean
  }

  export type company_accountsGetPayload<
    S extends boolean | null | undefined | company_accountsArgs,
    U = keyof S
      > = S extends true
        ? company_accounts
    : S extends undefined
    ? never
    : S extends company_accountsArgs | company_accountsFindManyArgs
    ?'include' extends U
    ? company_accounts 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof company_accounts ?company_accounts [P]
  : 
     never
  } 
    : company_accounts
  : company_accounts


  type company_accountsCountArgs = Merge<
    Omit<company_accountsFindManyArgs, 'select' | 'include'> & {
      select?: Company_accountsCountAggregateInputType | true
    }
  >

  export interface company_accountsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Company_accounts that matches the filter.
     * @param {company_accountsFindUniqueArgs} args - Arguments to find a Company_accounts
     * @example
     * // Get one Company_accounts
     * const company_accounts = await prisma.company_accounts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends company_accountsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, company_accountsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'company_accounts'> extends True ? CheckSelect<T, Prisma__company_accountsClient<company_accounts>, Prisma__company_accountsClient<company_accountsGetPayload<T>>> : CheckSelect<T, Prisma__company_accountsClient<company_accounts | null >, Prisma__company_accountsClient<company_accountsGetPayload<T> | null >>

    /**
     * Find the first Company_accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {company_accountsFindFirstArgs} args - Arguments to find a Company_accounts
     * @example
     * // Get one Company_accounts
     * const company_accounts = await prisma.company_accounts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends company_accountsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, company_accountsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'company_accounts'> extends True ? CheckSelect<T, Prisma__company_accountsClient<company_accounts>, Prisma__company_accountsClient<company_accountsGetPayload<T>>> : CheckSelect<T, Prisma__company_accountsClient<company_accounts | null >, Prisma__company_accountsClient<company_accountsGetPayload<T> | null >>

    /**
     * Find zero or more Company_accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {company_accountsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Company_accounts
     * const company_accounts = await prisma.company_accounts.findMany()
     * 
     * // Get first 10 Company_accounts
     * const company_accounts = await prisma.company_accounts.findMany({ take: 10 })
     * 
     * // Only select the `account_id`
     * const company_accountsWithAccount_idOnly = await prisma.company_accounts.findMany({ select: { account_id: true } })
     * 
    **/
    findMany<T extends company_accountsFindManyArgs>(
      args?: SelectSubset<T, company_accountsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<company_accounts>>, PrismaPromise<Array<company_accountsGetPayload<T>>>>

    /**
     * Create a Company_accounts.
     * @param {company_accountsCreateArgs} args - Arguments to create a Company_accounts.
     * @example
     * // Create one Company_accounts
     * const Company_accounts = await prisma.company_accounts.create({
     *   data: {
     *     // ... data to create a Company_accounts
     *   }
     * })
     * 
    **/
    create<T extends company_accountsCreateArgs>(
      args: SelectSubset<T, company_accountsCreateArgs>
    ): CheckSelect<T, Prisma__company_accountsClient<company_accounts>, Prisma__company_accountsClient<company_accountsGetPayload<T>>>

    /**
     * Create many Company_accounts.
     *     @param {company_accountsCreateManyArgs} args - Arguments to create many Company_accounts.
     *     @example
     *     // Create many Company_accounts
     *     const company_accounts = await prisma.company_accounts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends company_accountsCreateManyArgs>(
      args?: SelectSubset<T, company_accountsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Company_accounts.
     * @param {company_accountsDeleteArgs} args - Arguments to delete one Company_accounts.
     * @example
     * // Delete one Company_accounts
     * const Company_accounts = await prisma.company_accounts.delete({
     *   where: {
     *     // ... filter to delete one Company_accounts
     *   }
     * })
     * 
    **/
    delete<T extends company_accountsDeleteArgs>(
      args: SelectSubset<T, company_accountsDeleteArgs>
    ): CheckSelect<T, Prisma__company_accountsClient<company_accounts>, Prisma__company_accountsClient<company_accountsGetPayload<T>>>

    /**
     * Update one Company_accounts.
     * @param {company_accountsUpdateArgs} args - Arguments to update one Company_accounts.
     * @example
     * // Update one Company_accounts
     * const company_accounts = await prisma.company_accounts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends company_accountsUpdateArgs>(
      args: SelectSubset<T, company_accountsUpdateArgs>
    ): CheckSelect<T, Prisma__company_accountsClient<company_accounts>, Prisma__company_accountsClient<company_accountsGetPayload<T>>>

    /**
     * Delete zero or more Company_accounts.
     * @param {company_accountsDeleteManyArgs} args - Arguments to filter Company_accounts to delete.
     * @example
     * // Delete a few Company_accounts
     * const { count } = await prisma.company_accounts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends company_accountsDeleteManyArgs>(
      args?: SelectSubset<T, company_accountsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Company_accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {company_accountsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Company_accounts
     * const company_accounts = await prisma.company_accounts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends company_accountsUpdateManyArgs>(
      args: SelectSubset<T, company_accountsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Company_accounts.
     * @param {company_accountsUpsertArgs} args - Arguments to update or create a Company_accounts.
     * @example
     * // Update or create a Company_accounts
     * const company_accounts = await prisma.company_accounts.upsert({
     *   create: {
     *     // ... data to create a Company_accounts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company_accounts we want to update
     *   }
     * })
    **/
    upsert<T extends company_accountsUpsertArgs>(
      args: SelectSubset<T, company_accountsUpsertArgs>
    ): CheckSelect<T, Prisma__company_accountsClient<company_accounts>, Prisma__company_accountsClient<company_accountsGetPayload<T>>>

    /**
     * Count the number of Company_accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {company_accountsCountArgs} args - Arguments to filter Company_accounts to count.
     * @example
     * // Count the number of Company_accounts
     * const count = await prisma.company_accounts.count({
     *   where: {
     *     // ... the filter for the Company_accounts we want to count
     *   }
     * })
    **/
    count<T extends company_accountsCountArgs>(
      args?: Subset<T, company_accountsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Company_accountsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company_accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_accountsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Company_accountsAggregateArgs>(args: Subset<T, Company_accountsAggregateArgs>): PrismaPromise<GetCompany_accountsAggregateType<T>>

    /**
     * Group by Company_accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_accountsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Company_accountsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Company_accountsGroupByArgs['orderBy'] }
        : { orderBy?: Company_accountsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Company_accountsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompany_accountsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for company_accounts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__company_accountsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * company_accounts findUnique
   */
  export type company_accountsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the company_accounts
    **/
    select?: company_accountsSelect | null
    /**
     * Throw an Error if a company_accounts can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which company_accounts to fetch.
    **/
    where: company_accountsWhereUniqueInput
  }


  /**
   * company_accounts findFirst
   */
  export type company_accountsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the company_accounts
    **/
    select?: company_accountsSelect | null
    /**
     * Throw an Error if a company_accounts can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which company_accounts to fetch.
    **/
    where?: company_accountsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of company_accounts to fetch.
    **/
    orderBy?: Enumerable<company_accountsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for company_accounts.
    **/
    cursor?: company_accountsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_accounts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_accounts.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of company_accounts.
    **/
    distinct?: Enumerable<Company_accountsScalarFieldEnum>
  }


  /**
   * company_accounts findMany
   */
  export type company_accountsFindManyArgs = {
    /**
     * Select specific fields to fetch from the company_accounts
    **/
    select?: company_accountsSelect | null
    /**
     * Filter, which company_accounts to fetch.
    **/
    where?: company_accountsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of company_accounts to fetch.
    **/
    orderBy?: Enumerable<company_accountsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing company_accounts.
    **/
    cursor?: company_accountsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_accounts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_accounts.
    **/
    skip?: number
    distinct?: Enumerable<Company_accountsScalarFieldEnum>
  }


  /**
   * company_accounts create
   */
  export type company_accountsCreateArgs = {
    /**
     * Select specific fields to fetch from the company_accounts
    **/
    select?: company_accountsSelect | null
    /**
     * The data needed to create a company_accounts.
    **/
    data: XOR<company_accountsCreateInput, company_accountsUncheckedCreateInput>
  }


  /**
   * company_accounts createMany
   */
  export type company_accountsCreateManyArgs = {
    data: Enumerable<company_accountsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * company_accounts update
   */
  export type company_accountsUpdateArgs = {
    /**
     * Select specific fields to fetch from the company_accounts
    **/
    select?: company_accountsSelect | null
    /**
     * The data needed to update a company_accounts.
    **/
    data: XOR<company_accountsUpdateInput, company_accountsUncheckedUpdateInput>
    /**
     * Choose, which company_accounts to update.
    **/
    where: company_accountsWhereUniqueInput
  }


  /**
   * company_accounts updateMany
   */
  export type company_accountsUpdateManyArgs = {
    data: XOR<company_accountsUpdateManyMutationInput, company_accountsUncheckedUpdateManyInput>
    where?: company_accountsWhereInput
  }


  /**
   * company_accounts upsert
   */
  export type company_accountsUpsertArgs = {
    /**
     * Select specific fields to fetch from the company_accounts
    **/
    select?: company_accountsSelect | null
    /**
     * The filter to search for the company_accounts to update in case it exists.
    **/
    where: company_accountsWhereUniqueInput
    /**
     * In case the company_accounts found by the `where` argument doesn't exist, create a new company_accounts with this data.
    **/
    create: XOR<company_accountsCreateInput, company_accountsUncheckedCreateInput>
    /**
     * In case the company_accounts was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<company_accountsUpdateInput, company_accountsUncheckedUpdateInput>
  }


  /**
   * company_accounts delete
   */
  export type company_accountsDeleteArgs = {
    /**
     * Select specific fields to fetch from the company_accounts
    **/
    select?: company_accountsSelect | null
    /**
     * Filter which company_accounts to delete.
    **/
    where: company_accountsWhereUniqueInput
  }


  /**
   * company_accounts deleteMany
   */
  export type company_accountsDeleteManyArgs = {
    where?: company_accountsWhereInput
  }


  /**
   * company_accounts without action
   */
  export type company_accountsArgs = {
    /**
     * Select specific fields to fetch from the company_accounts
    **/
    select?: company_accountsSelect | null
  }



  /**
   * Model subscriptions
   */


  export type AggregateSubscriptions = {
    count: SubscriptionsCountAggregateOutputType | null
    avg: SubscriptionsAvgAggregateOutputType | null
    sum: SubscriptionsSumAggregateOutputType | null
    min: SubscriptionsMinAggregateOutputType | null
    max: SubscriptionsMaxAggregateOutputType | null
  }

  export type SubscriptionsAvgAggregateOutputType = {
    subscription_id: number | null
    company_id: number | null
  }

  export type SubscriptionsSumAggregateOutputType = {
    subscription_id: number | null
    company_id: number | null
  }

  export type SubscriptionsMinAggregateOutputType = {
    subscription_id: number | null
    company_id: number | null
    subscription_type: string | null
    status: string | null
    registration_date: Date | null
    expiration_date: Date | null
  }

  export type SubscriptionsMaxAggregateOutputType = {
    subscription_id: number | null
    company_id: number | null
    subscription_type: string | null
    status: string | null
    registration_date: Date | null
    expiration_date: Date | null
  }

  export type SubscriptionsCountAggregateOutputType = {
    subscription_id: number
    company_id: number
    subscription_type: number
    status: number
    registration_date: number
    expiration_date: number
    _all: number
  }


  export type SubscriptionsAvgAggregateInputType = {
    subscription_id?: true
    company_id?: true
  }

  export type SubscriptionsSumAggregateInputType = {
    subscription_id?: true
    company_id?: true
  }

  export type SubscriptionsMinAggregateInputType = {
    subscription_id?: true
    company_id?: true
    subscription_type?: true
    status?: true
    registration_date?: true
    expiration_date?: true
  }

  export type SubscriptionsMaxAggregateInputType = {
    subscription_id?: true
    company_id?: true
    subscription_type?: true
    status?: true
    registration_date?: true
    expiration_date?: true
  }

  export type SubscriptionsCountAggregateInputType = {
    subscription_id?: true
    company_id?: true
    subscription_type?: true
    status?: true
    registration_date?: true
    expiration_date?: true
    _all?: true
  }

  export type SubscriptionsAggregateArgs = {
    /**
     * Filter which subscriptions to aggregate.
    **/
    where?: subscriptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subscriptions to fetch.
    **/
    orderBy?: Enumerable<subscriptionsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: subscriptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subscriptions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subscriptions.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned subscriptions
    **/
    count?: true | SubscriptionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: SubscriptionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: SubscriptionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: SubscriptionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: SubscriptionsMaxAggregateInputType
  }

  export type GetSubscriptionsAggregateType<T extends SubscriptionsAggregateArgs> = {
    [P in keyof T & keyof AggregateSubscriptions]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscriptions[P]>
      : GetScalarType<T[P], AggregateSubscriptions[P]>
  }


    
    
  export type SubscriptionsGroupByArgs = {
    where?: subscriptionsWhereInput
    orderBy?: Enumerable<subscriptionsOrderByInput>
    by: Array<SubscriptionsScalarFieldEnum>
    having?: subscriptionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: SubscriptionsCountAggregateInputType | true
    avg?: SubscriptionsAvgAggregateInputType
    sum?: SubscriptionsSumAggregateInputType
    min?: SubscriptionsMinAggregateInputType
    max?: SubscriptionsMaxAggregateInputType
  }


  export type SubscriptionsGroupByOutputType = {
    subscription_id: number
    company_id: number
    subscription_type: string
    status: string
    registration_date: Date
    expiration_date: Date
    count: SubscriptionsCountAggregateOutputType | null
    avg: SubscriptionsAvgAggregateOutputType | null
    sum: SubscriptionsSumAggregateOutputType | null
    min: SubscriptionsMinAggregateOutputType | null
    max: SubscriptionsMaxAggregateOutputType | null
  }

  type GetSubscriptionsGroupByPayload<T extends SubscriptionsGroupByArgs> = Promise<Array<
    PickArray<SubscriptionsGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof SubscriptionsGroupByOutputType))]: GetScalarType<T[P], SubscriptionsGroupByOutputType[P]>
    }
  >>
    

  export type subscriptionsSelect = {
    subscription_id?: boolean
    company_id?: boolean
    subscription_type?: boolean
    status?: boolean
    registration_date?: boolean
    expiration_date?: boolean
    companies?: boolean | companiesArgs
  }

  export type subscriptionsInclude = {
    companies?: boolean | companiesArgs
  }

  export type subscriptionsGetPayload<
    S extends boolean | null | undefined | subscriptionsArgs,
    U = keyof S
      > = S extends true
        ? subscriptions
    : S extends undefined
    ? never
    : S extends subscriptionsArgs | subscriptionsFindManyArgs
    ?'include' extends U
    ? subscriptions  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof subscriptions ?subscriptions [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> : never
  } 
    : subscriptions
  : subscriptions


  type subscriptionsCountArgs = Merge<
    Omit<subscriptionsFindManyArgs, 'select' | 'include'> & {
      select?: SubscriptionsCountAggregateInputType | true
    }
  >

  export interface subscriptionsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Subscriptions that matches the filter.
     * @param {subscriptionsFindUniqueArgs} args - Arguments to find a Subscriptions
     * @example
     * // Get one Subscriptions
     * const subscriptions = await prisma.subscriptions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends subscriptionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, subscriptionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'subscriptions'> extends True ? CheckSelect<T, Prisma__subscriptionsClient<subscriptions>, Prisma__subscriptionsClient<subscriptionsGetPayload<T>>> : CheckSelect<T, Prisma__subscriptionsClient<subscriptions | null >, Prisma__subscriptionsClient<subscriptionsGetPayload<T> | null >>

    /**
     * Find the first Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subscriptionsFindFirstArgs} args - Arguments to find a Subscriptions
     * @example
     * // Get one Subscriptions
     * const subscriptions = await prisma.subscriptions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends subscriptionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, subscriptionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'subscriptions'> extends True ? CheckSelect<T, Prisma__subscriptionsClient<subscriptions>, Prisma__subscriptionsClient<subscriptionsGetPayload<T>>> : CheckSelect<T, Prisma__subscriptionsClient<subscriptions | null >, Prisma__subscriptionsClient<subscriptionsGetPayload<T> | null >>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subscriptionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscriptions.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscriptions.findMany({ take: 10 })
     * 
     * // Only select the `subscription_id`
     * const subscriptionsWithSubscription_idOnly = await prisma.subscriptions.findMany({ select: { subscription_id: true } })
     * 
    **/
    findMany<T extends subscriptionsFindManyArgs>(
      args?: SelectSubset<T, subscriptionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<subscriptions>>, PrismaPromise<Array<subscriptionsGetPayload<T>>>>

    /**
     * Create a Subscriptions.
     * @param {subscriptionsCreateArgs} args - Arguments to create a Subscriptions.
     * @example
     * // Create one Subscriptions
     * const Subscriptions = await prisma.subscriptions.create({
     *   data: {
     *     // ... data to create a Subscriptions
     *   }
     * })
     * 
    **/
    create<T extends subscriptionsCreateArgs>(
      args: SelectSubset<T, subscriptionsCreateArgs>
    ): CheckSelect<T, Prisma__subscriptionsClient<subscriptions>, Prisma__subscriptionsClient<subscriptionsGetPayload<T>>>

    /**
     * Create many Subscriptions.
     *     @param {subscriptionsCreateManyArgs} args - Arguments to create many Subscriptions.
     *     @example
     *     // Create many Subscriptions
     *     const subscriptions = await prisma.subscriptions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends subscriptionsCreateManyArgs>(
      args?: SelectSubset<T, subscriptionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Subscriptions.
     * @param {subscriptionsDeleteArgs} args - Arguments to delete one Subscriptions.
     * @example
     * // Delete one Subscriptions
     * const Subscriptions = await prisma.subscriptions.delete({
     *   where: {
     *     // ... filter to delete one Subscriptions
     *   }
     * })
     * 
    **/
    delete<T extends subscriptionsDeleteArgs>(
      args: SelectSubset<T, subscriptionsDeleteArgs>
    ): CheckSelect<T, Prisma__subscriptionsClient<subscriptions>, Prisma__subscriptionsClient<subscriptionsGetPayload<T>>>

    /**
     * Update one Subscriptions.
     * @param {subscriptionsUpdateArgs} args - Arguments to update one Subscriptions.
     * @example
     * // Update one Subscriptions
     * const subscriptions = await prisma.subscriptions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends subscriptionsUpdateArgs>(
      args: SelectSubset<T, subscriptionsUpdateArgs>
    ): CheckSelect<T, Prisma__subscriptionsClient<subscriptions>, Prisma__subscriptionsClient<subscriptionsGetPayload<T>>>

    /**
     * Delete zero or more Subscriptions.
     * @param {subscriptionsDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscriptions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends subscriptionsDeleteManyArgs>(
      args?: SelectSubset<T, subscriptionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subscriptionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscriptions = await prisma.subscriptions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends subscriptionsUpdateManyArgs>(
      args: SelectSubset<T, subscriptionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Subscriptions.
     * @param {subscriptionsUpsertArgs} args - Arguments to update or create a Subscriptions.
     * @example
     * // Update or create a Subscriptions
     * const subscriptions = await prisma.subscriptions.upsert({
     *   create: {
     *     // ... data to create a Subscriptions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscriptions we want to update
     *   }
     * })
    **/
    upsert<T extends subscriptionsUpsertArgs>(
      args: SelectSubset<T, subscriptionsUpsertArgs>
    ): CheckSelect<T, Prisma__subscriptionsClient<subscriptions>, Prisma__subscriptionsClient<subscriptionsGetPayload<T>>>

    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subscriptionsCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscriptions.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends subscriptionsCountArgs>(
      args?: Subset<T, subscriptionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionsAggregateArgs>(args: Subset<T, SubscriptionsAggregateArgs>): PrismaPromise<GetSubscriptionsAggregateType<T>>

    /**
     * Group by Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionsGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for subscriptions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__subscriptionsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null >, Prisma__companiesClient<companiesGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * subscriptions findUnique
   */
  export type subscriptionsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the subscriptions
    **/
    select?: subscriptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: subscriptionsInclude | null
    /**
     * Throw an Error if a subscriptions can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which subscriptions to fetch.
    **/
    where: subscriptionsWhereUniqueInput
  }


  /**
   * subscriptions findFirst
   */
  export type subscriptionsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the subscriptions
    **/
    select?: subscriptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: subscriptionsInclude | null
    /**
     * Throw an Error if a subscriptions can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which subscriptions to fetch.
    **/
    where?: subscriptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subscriptions to fetch.
    **/
    orderBy?: Enumerable<subscriptionsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subscriptions.
    **/
    cursor?: subscriptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subscriptions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subscriptions.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subscriptions.
    **/
    distinct?: Enumerable<SubscriptionsScalarFieldEnum>
  }


  /**
   * subscriptions findMany
   */
  export type subscriptionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the subscriptions
    **/
    select?: subscriptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: subscriptionsInclude | null
    /**
     * Filter, which subscriptions to fetch.
    **/
    where?: subscriptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subscriptions to fetch.
    **/
    orderBy?: Enumerable<subscriptionsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing subscriptions.
    **/
    cursor?: subscriptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subscriptions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subscriptions.
    **/
    skip?: number
    distinct?: Enumerable<SubscriptionsScalarFieldEnum>
  }


  /**
   * subscriptions create
   */
  export type subscriptionsCreateArgs = {
    /**
     * Select specific fields to fetch from the subscriptions
    **/
    select?: subscriptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: subscriptionsInclude | null
    /**
     * The data needed to create a subscriptions.
    **/
    data: XOR<subscriptionsCreateInput, subscriptionsUncheckedCreateInput>
  }


  /**
   * subscriptions createMany
   */
  export type subscriptionsCreateManyArgs = {
    data: Enumerable<subscriptionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * subscriptions update
   */
  export type subscriptionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the subscriptions
    **/
    select?: subscriptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: subscriptionsInclude | null
    /**
     * The data needed to update a subscriptions.
    **/
    data: XOR<subscriptionsUpdateInput, subscriptionsUncheckedUpdateInput>
    /**
     * Choose, which subscriptions to update.
    **/
    where: subscriptionsWhereUniqueInput
  }


  /**
   * subscriptions updateMany
   */
  export type subscriptionsUpdateManyArgs = {
    data: XOR<subscriptionsUpdateManyMutationInput, subscriptionsUncheckedUpdateManyInput>
    where?: subscriptionsWhereInput
  }


  /**
   * subscriptions upsert
   */
  export type subscriptionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the subscriptions
    **/
    select?: subscriptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: subscriptionsInclude | null
    /**
     * The filter to search for the subscriptions to update in case it exists.
    **/
    where: subscriptionsWhereUniqueInput
    /**
     * In case the subscriptions found by the `where` argument doesn't exist, create a new subscriptions with this data.
    **/
    create: XOR<subscriptionsCreateInput, subscriptionsUncheckedCreateInput>
    /**
     * In case the subscriptions was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<subscriptionsUpdateInput, subscriptionsUncheckedUpdateInput>
  }


  /**
   * subscriptions delete
   */
  export type subscriptionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the subscriptions
    **/
    select?: subscriptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: subscriptionsInclude | null
    /**
     * Filter which subscriptions to delete.
    **/
    where: subscriptionsWhereUniqueInput
  }


  /**
   * subscriptions deleteMany
   */
  export type subscriptionsDeleteManyArgs = {
    where?: subscriptionsWhereInput
  }


  /**
   * subscriptions without action
   */
  export type subscriptionsArgs = {
    /**
     * Select specific fields to fetch from the subscriptions
    **/
    select?: subscriptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: subscriptionsInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    count: UsersCountAggregateOutputType | null
    avg: UsersAvgAggregateOutputType | null
    sum: UsersSumAggregateOutputType | null
    min: UsersMinAggregateOutputType | null
    max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
    [P in keyof T & keyof AggregateUsers]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }


    
    
  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: UsersCountAggregateInputType | true
    avg?: UsersAvgAggregateInputType
    sum?: UsersSumAggregateInputType
    min?: UsersMinAggregateInputType
    max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    username: string
    email: string
    password: string
    count: UsersCountAggregateOutputType | null
    avg: UsersAvgAggregateOutputType | null
    sum: UsersSumAggregateOutputType | null
    min: UsersMinAggregateOutputType | null
    max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Promise<Array<
    PickArray<UsersGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof UsersGroupByOutputType))]: GetScalarType<T[P], UsersGroupByOutputType[P]>
    }
  >>
    

  export type usersSelect = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    companies?: boolean | companiesFindManyArgs
  }

  export type usersInclude = {
    companies?: boolean | companiesFindManyArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? Array < companiesGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof users ?users [P]
  : 
          P extends 'companies'
        ? Array < companiesGetPayload<S['select'][P]>>  : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesFindManyArgs = {}>(args?: Subset<T, companiesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<companies>>, PrismaPromise<Array<companiesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
  }



  /**
   * Model users_groups
   */


  export type AggregateUsers_groups = {
    count: Users_groupsCountAggregateOutputType | null
    avg: Users_groupsAvgAggregateOutputType | null
    sum: Users_groupsSumAggregateOutputType | null
    min: Users_groupsMinAggregateOutputType | null
    max: Users_groupsMaxAggregateOutputType | null
  }

  export type Users_groupsAvgAggregateOutputType = {
    group_id: number | null
  }

  export type Users_groupsSumAggregateOutputType = {
    group_id: number | null
  }

  export type Users_groupsMinAggregateOutputType = {
    group_id: number | null
    group_name: string | null
    group_description: string | null
  }

  export type Users_groupsMaxAggregateOutputType = {
    group_id: number | null
    group_name: string | null
    group_description: string | null
  }

  export type Users_groupsCountAggregateOutputType = {
    group_id: number
    group_name: number
    group_description: number
    _all: number
  }


  export type Users_groupsAvgAggregateInputType = {
    group_id?: true
  }

  export type Users_groupsSumAggregateInputType = {
    group_id?: true
  }

  export type Users_groupsMinAggregateInputType = {
    group_id?: true
    group_name?: true
    group_description?: true
  }

  export type Users_groupsMaxAggregateInputType = {
    group_id?: true
    group_name?: true
    group_description?: true
  }

  export type Users_groupsCountAggregateInputType = {
    group_id?: true
    group_name?: true
    group_description?: true
    _all?: true
  }

  export type Users_groupsAggregateArgs = {
    /**
     * Filter which users_groups to aggregate.
    **/
    where?: users_groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_groups to fetch.
    **/
    orderBy?: Enumerable<users_groupsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: users_groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_groups from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_groups.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users_groups
    **/
    count?: true | Users_groupsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Users_groupsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Users_groupsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Users_groupsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Users_groupsMaxAggregateInputType
  }

  export type GetUsers_groupsAggregateType<T extends Users_groupsAggregateArgs> = {
    [P in keyof T & keyof AggregateUsers_groups]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers_groups[P]>
      : GetScalarType<T[P], AggregateUsers_groups[P]>
  }


    
    
  export type Users_groupsGroupByArgs = {
    where?: users_groupsWhereInput
    orderBy?: Enumerable<users_groupsOrderByInput>
    by: Array<Users_groupsScalarFieldEnum>
    having?: users_groupsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Users_groupsCountAggregateInputType | true
    avg?: Users_groupsAvgAggregateInputType
    sum?: Users_groupsSumAggregateInputType
    min?: Users_groupsMinAggregateInputType
    max?: Users_groupsMaxAggregateInputType
  }


  export type Users_groupsGroupByOutputType = {
    group_id: number
    group_name: string
    group_description: string
    count: Users_groupsCountAggregateOutputType | null
    avg: Users_groupsAvgAggregateOutputType | null
    sum: Users_groupsSumAggregateOutputType | null
    min: Users_groupsMinAggregateOutputType | null
    max: Users_groupsMaxAggregateOutputType | null
  }

  type GetUsers_groupsGroupByPayload<T extends Users_groupsGroupByArgs> = Promise<Array<
    PickArray<Users_groupsGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Users_groupsGroupByOutputType))]: GetScalarType<T[P], Users_groupsGroupByOutputType[P]>
    }
  >>
    

  export type users_groupsSelect = {
    group_id?: boolean
    group_name?: boolean
    group_description?: boolean
  }

  export type users_groupsGetPayload<
    S extends boolean | null | undefined | users_groupsArgs,
    U = keyof S
      > = S extends true
        ? users_groups
    : S extends undefined
    ? never
    : S extends users_groupsArgs | users_groupsFindManyArgs
    ?'include' extends U
    ? users_groups 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof users_groups ?users_groups [P]
  : 
     never
  } 
    : users_groups
  : users_groups


  type users_groupsCountArgs = Merge<
    Omit<users_groupsFindManyArgs, 'select' | 'include'> & {
      select?: Users_groupsCountAggregateInputType | true
    }
  >

  export interface users_groupsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users_groups that matches the filter.
     * @param {users_groupsFindUniqueArgs} args - Arguments to find a Users_groups
     * @example
     * // Get one Users_groups
     * const users_groups = await prisma.users_groups.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends users_groupsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, users_groupsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users_groups'> extends True ? CheckSelect<T, Prisma__users_groupsClient<users_groups>, Prisma__users_groupsClient<users_groupsGetPayload<T>>> : CheckSelect<T, Prisma__users_groupsClient<users_groups | null >, Prisma__users_groupsClient<users_groupsGetPayload<T> | null >>

    /**
     * Find the first Users_groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_groupsFindFirstArgs} args - Arguments to find a Users_groups
     * @example
     * // Get one Users_groups
     * const users_groups = await prisma.users_groups.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends users_groupsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, users_groupsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users_groups'> extends True ? CheckSelect<T, Prisma__users_groupsClient<users_groups>, Prisma__users_groupsClient<users_groupsGetPayload<T>>> : CheckSelect<T, Prisma__users_groupsClient<users_groups | null >, Prisma__users_groupsClient<users_groupsGetPayload<T> | null >>

    /**
     * Find zero or more Users_groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_groupsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users_groups
     * const users_groups = await prisma.users_groups.findMany()
     * 
     * // Get first 10 Users_groups
     * const users_groups = await prisma.users_groups.findMany({ take: 10 })
     * 
     * // Only select the `group_id`
     * const users_groupsWithGroup_idOnly = await prisma.users_groups.findMany({ select: { group_id: true } })
     * 
    **/
    findMany<T extends users_groupsFindManyArgs>(
      args?: SelectSubset<T, users_groupsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users_groups>>, PrismaPromise<Array<users_groupsGetPayload<T>>>>

    /**
     * Create a Users_groups.
     * @param {users_groupsCreateArgs} args - Arguments to create a Users_groups.
     * @example
     * // Create one Users_groups
     * const Users_groups = await prisma.users_groups.create({
     *   data: {
     *     // ... data to create a Users_groups
     *   }
     * })
     * 
    **/
    create<T extends users_groupsCreateArgs>(
      args: SelectSubset<T, users_groupsCreateArgs>
    ): CheckSelect<T, Prisma__users_groupsClient<users_groups>, Prisma__users_groupsClient<users_groupsGetPayload<T>>>

    /**
     * Create many Users_groups.
     *     @param {users_groupsCreateManyArgs} args - Arguments to create many Users_groups.
     *     @example
     *     // Create many Users_groups
     *     const users_groups = await prisma.users_groups.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends users_groupsCreateManyArgs>(
      args?: SelectSubset<T, users_groupsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users_groups.
     * @param {users_groupsDeleteArgs} args - Arguments to delete one Users_groups.
     * @example
     * // Delete one Users_groups
     * const Users_groups = await prisma.users_groups.delete({
     *   where: {
     *     // ... filter to delete one Users_groups
     *   }
     * })
     * 
    **/
    delete<T extends users_groupsDeleteArgs>(
      args: SelectSubset<T, users_groupsDeleteArgs>
    ): CheckSelect<T, Prisma__users_groupsClient<users_groups>, Prisma__users_groupsClient<users_groupsGetPayload<T>>>

    /**
     * Update one Users_groups.
     * @param {users_groupsUpdateArgs} args - Arguments to update one Users_groups.
     * @example
     * // Update one Users_groups
     * const users_groups = await prisma.users_groups.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends users_groupsUpdateArgs>(
      args: SelectSubset<T, users_groupsUpdateArgs>
    ): CheckSelect<T, Prisma__users_groupsClient<users_groups>, Prisma__users_groupsClient<users_groupsGetPayload<T>>>

    /**
     * Delete zero or more Users_groups.
     * @param {users_groupsDeleteManyArgs} args - Arguments to filter Users_groups to delete.
     * @example
     * // Delete a few Users_groups
     * const { count } = await prisma.users_groups.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends users_groupsDeleteManyArgs>(
      args?: SelectSubset<T, users_groupsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users_groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_groupsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users_groups
     * const users_groups = await prisma.users_groups.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends users_groupsUpdateManyArgs>(
      args: SelectSubset<T, users_groupsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users_groups.
     * @param {users_groupsUpsertArgs} args - Arguments to update or create a Users_groups.
     * @example
     * // Update or create a Users_groups
     * const users_groups = await prisma.users_groups.upsert({
     *   create: {
     *     // ... data to create a Users_groups
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users_groups we want to update
     *   }
     * })
    **/
    upsert<T extends users_groupsUpsertArgs>(
      args: SelectSubset<T, users_groupsUpsertArgs>
    ): CheckSelect<T, Prisma__users_groupsClient<users_groups>, Prisma__users_groupsClient<users_groupsGetPayload<T>>>

    /**
     * Count the number of Users_groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_groupsCountArgs} args - Arguments to filter Users_groups to count.
     * @example
     * // Count the number of Users_groups
     * const count = await prisma.users_groups.count({
     *   where: {
     *     // ... the filter for the Users_groups we want to count
     *   }
     * })
    **/
    count<T extends users_groupsCountArgs>(
      args?: Subset<T, users_groupsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Users_groupsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users_groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_groupsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Users_groupsAggregateArgs>(args: Subset<T, Users_groupsAggregateArgs>): PrismaPromise<GetUsers_groupsAggregateType<T>>

    /**
     * Group by Users_groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_groupsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Users_groupsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Users_groupsGroupByArgs['orderBy'] }
        : { orderBy?: Users_groupsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Users_groupsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsers_groupsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users_groups.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__users_groupsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users_groups findUnique
   */
  export type users_groupsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users_groups
    **/
    select?: users_groupsSelect | null
    /**
     * Throw an Error if a users_groups can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users_groups to fetch.
    **/
    where: users_groupsWhereUniqueInput
  }


  /**
   * users_groups findFirst
   */
  export type users_groupsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users_groups
    **/
    select?: users_groupsSelect | null
    /**
     * Throw an Error if a users_groups can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users_groups to fetch.
    **/
    where?: users_groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_groups to fetch.
    **/
    orderBy?: Enumerable<users_groupsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users_groups.
    **/
    cursor?: users_groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_groups from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_groups.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users_groups.
    **/
    distinct?: Enumerable<Users_groupsScalarFieldEnum>
  }


  /**
   * users_groups findMany
   */
  export type users_groupsFindManyArgs = {
    /**
     * Select specific fields to fetch from the users_groups
    **/
    select?: users_groupsSelect | null
    /**
     * Filter, which users_groups to fetch.
    **/
    where?: users_groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_groups to fetch.
    **/
    orderBy?: Enumerable<users_groupsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users_groups.
    **/
    cursor?: users_groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_groups from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_groups.
    **/
    skip?: number
    distinct?: Enumerable<Users_groupsScalarFieldEnum>
  }


  /**
   * users_groups create
   */
  export type users_groupsCreateArgs = {
    /**
     * Select specific fields to fetch from the users_groups
    **/
    select?: users_groupsSelect | null
    /**
     * The data needed to create a users_groups.
    **/
    data: XOR<users_groupsCreateInput, users_groupsUncheckedCreateInput>
  }


  /**
   * users_groups createMany
   */
  export type users_groupsCreateManyArgs = {
    data: Enumerable<users_groupsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users_groups update
   */
  export type users_groupsUpdateArgs = {
    /**
     * Select specific fields to fetch from the users_groups
    **/
    select?: users_groupsSelect | null
    /**
     * The data needed to update a users_groups.
    **/
    data: XOR<users_groupsUpdateInput, users_groupsUncheckedUpdateInput>
    /**
     * Choose, which users_groups to update.
    **/
    where: users_groupsWhereUniqueInput
  }


  /**
   * users_groups updateMany
   */
  export type users_groupsUpdateManyArgs = {
    data: XOR<users_groupsUpdateManyMutationInput, users_groupsUncheckedUpdateManyInput>
    where?: users_groupsWhereInput
  }


  /**
   * users_groups upsert
   */
  export type users_groupsUpsertArgs = {
    /**
     * Select specific fields to fetch from the users_groups
    **/
    select?: users_groupsSelect | null
    /**
     * The filter to search for the users_groups to update in case it exists.
    **/
    where: users_groupsWhereUniqueInput
    /**
     * In case the users_groups found by the `where` argument doesn't exist, create a new users_groups with this data.
    **/
    create: XOR<users_groupsCreateInput, users_groupsUncheckedCreateInput>
    /**
     * In case the users_groups was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<users_groupsUpdateInput, users_groupsUncheckedUpdateInput>
  }


  /**
   * users_groups delete
   */
  export type users_groupsDeleteArgs = {
    /**
     * Select specific fields to fetch from the users_groups
    **/
    select?: users_groupsSelect | null
    /**
     * Filter which users_groups to delete.
    **/
    where: users_groupsWhereUniqueInput
  }


  /**
   * users_groups deleteMany
   */
  export type users_groupsDeleteManyArgs = {
    where?: users_groupsWhereInput
  }


  /**
   * users_groups without action
   */
  export type users_groupsArgs = {
    /**
     * Select specific fields to fetch from the users_groups
    **/
    select?: users_groupsSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CargosScalarFieldEnum: {
    cargo_id: 'cargo_id',
    user_id: 'user_id',
    country_from: 'country_from',
    country_to: 'country_to',
    city_from: 'city_from',
    city_to: 'city_to',
    address_from: 'address_from',
    address_to: 'address_to',
    loading_date: 'loading_date',
    delivery_date: 'delivery_date',
    circular_course: 'circular_course',
    weight: 'weight',
    size: 'size',
    cargo_type: 'cargo_type',
    vehicle_type: 'vehicle_type',
    registered: 'registered'
  };

  export type CargosScalarFieldEnum = (typeof CargosScalarFieldEnum)[keyof typeof CargosScalarFieldEnum]


  export const CompaniesScalarFieldEnum: {
    company_id: 'company_id',
    user_id: 'user_id',
    company_name: 'company_name',
    country: 'country',
    city: 'city',
    street: 'street',
    owner_first_name: 'owner_first_name',
    owner_last_name: 'owner_last_name',
    phone: 'phone',
    registrationDate: 'registrationDate',
    expirationDate: 'expirationDate',
    business_type: 'business_type',
    eik: 'eik',
    postcode: 'postcode'
  };

  export type CompaniesScalarFieldEnum = (typeof CompaniesScalarFieldEnum)[keyof typeof CompaniesScalarFieldEnum]


  export const Company_accountsScalarFieldEnum: {
    account_id: 'account_id',
    company_id: 'company_id',
    group_id: 'group_id',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    phone: 'phone',
    registration_date: 'registration_date',
    expiration_date: 'expiration_date'
  };

  export type Company_accountsScalarFieldEnum = (typeof Company_accountsScalarFieldEnum)[keyof typeof Company_accountsScalarFieldEnum]


  export const SubscriptionsScalarFieldEnum: {
    subscription_id: 'subscription_id',
    company_id: 'company_id',
    subscription_type: 'subscription_type',
    status: 'status',
    registration_date: 'registration_date',
    expiration_date: 'expiration_date'
  };

  export type SubscriptionsScalarFieldEnum = (typeof SubscriptionsScalarFieldEnum)[keyof typeof SubscriptionsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const Users_groupsScalarFieldEnum: {
    group_id: 'group_id',
    group_name: 'group_name',
    group_description: 'group_description'
  };

  export type Users_groupsScalarFieldEnum = (typeof Users_groupsScalarFieldEnum)[keyof typeof Users_groupsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type cargosWhereInput = {
    AND?: Enumerable<cargosWhereInput>
    OR?: Enumerable<cargosWhereInput>
    NOT?: Enumerable<cargosWhereInput>
    cargo_id?: IntFilter | number
    user_id?: IntFilter | number
    country_from?: StringFilter | string
    country_to?: StringFilter | string
    city_from?: StringFilter | string
    city_to?: StringFilter | string
    address_from?: StringFilter | string
    address_to?: StringFilter | string
    loading_date?: DateTimeFilter | Date | string
    delivery_date?: DateTimeFilter | Date | string
    circular_course?: IntFilter | number
    weight?: IntFilter | number
    size?: IntFilter | number
    cargo_type?: StringFilter | string
    vehicle_type?: StringFilter | string
    registered?: DateTimeFilter | Date | string
  }

  export type cargosOrderByInput = {
    cargo_id?: SortOrder
    user_id?: SortOrder
    country_from?: SortOrder
    country_to?: SortOrder
    city_from?: SortOrder
    city_to?: SortOrder
    address_from?: SortOrder
    address_to?: SortOrder
    loading_date?: SortOrder
    delivery_date?: SortOrder
    circular_course?: SortOrder
    weight?: SortOrder
    size?: SortOrder
    cargo_type?: SortOrder
    vehicle_type?: SortOrder
    registered?: SortOrder
  }

  export type cargosWhereUniqueInput = {
    cargo_id?: number
  }

  export type cargosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<cargosScalarWhereWithAggregatesInput>
    OR?: Enumerable<cargosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<cargosScalarWhereWithAggregatesInput>
    cargo_id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    country_from?: StringWithAggregatesFilter | string
    country_to?: StringWithAggregatesFilter | string
    city_from?: StringWithAggregatesFilter | string
    city_to?: StringWithAggregatesFilter | string
    address_from?: StringWithAggregatesFilter | string
    address_to?: StringWithAggregatesFilter | string
    loading_date?: DateTimeWithAggregatesFilter | Date | string
    delivery_date?: DateTimeWithAggregatesFilter | Date | string
    circular_course?: IntWithAggregatesFilter | number
    weight?: IntWithAggregatesFilter | number
    size?: IntWithAggregatesFilter | number
    cargo_type?: StringWithAggregatesFilter | string
    vehicle_type?: StringWithAggregatesFilter | string
    registered?: DateTimeWithAggregatesFilter | Date | string
  }

  export type companiesWhereInput = {
    AND?: Enumerable<companiesWhereInput>
    OR?: Enumerable<companiesWhereInput>
    NOT?: Enumerable<companiesWhereInput>
    company_id?: IntFilter | number
    user_id?: IntFilter | number
    company_name?: StringFilter | string
    country?: StringFilter | string
    city?: StringFilter | string
    street?: StringFilter | string
    owner_first_name?: StringFilter | string
    owner_last_name?: StringFilter | string
    phone?: IntFilter | number
    registrationDate?: DateTimeFilter | Date | string
    expirationDate?: DateTimeFilter | Date | string
    business_type?: StringFilter | string
    eik?: IntFilter | number
    postcode?: StringFilter | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
    subscriptions?: XOR<SubscriptionsRelationFilter, subscriptionsWhereInput> | null
  }

  export type companiesOrderByInput = {
    company_id?: SortOrder
    user_id?: SortOrder
    company_name?: SortOrder
    country?: SortOrder
    city?: SortOrder
    street?: SortOrder
    owner_first_name?: SortOrder
    owner_last_name?: SortOrder
    phone?: SortOrder
    registrationDate?: SortOrder
    expirationDate?: SortOrder
    business_type?: SortOrder
    eik?: SortOrder
    postcode?: SortOrder
  }

  export type companiesWhereUniqueInput = {
    company_id?: number
  }

  export type companiesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<companiesScalarWhereWithAggregatesInput>
    OR?: Enumerable<companiesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<companiesScalarWhereWithAggregatesInput>
    company_id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    company_name?: StringWithAggregatesFilter | string
    country?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    street?: StringWithAggregatesFilter | string
    owner_first_name?: StringWithAggregatesFilter | string
    owner_last_name?: StringWithAggregatesFilter | string
    phone?: IntWithAggregatesFilter | number
    registrationDate?: DateTimeWithAggregatesFilter | Date | string
    expirationDate?: DateTimeWithAggregatesFilter | Date | string
    business_type?: StringWithAggregatesFilter | string
    eik?: IntWithAggregatesFilter | number
    postcode?: StringWithAggregatesFilter | string
  }

  export type company_accountsWhereInput = {
    AND?: Enumerable<company_accountsWhereInput>
    OR?: Enumerable<company_accountsWhereInput>
    NOT?: Enumerable<company_accountsWhereInput>
    account_id?: IntFilter | number
    company_id?: IntFilter | number
    group_id?: IntFilter | number
    first_name?: StringFilter | string
    last_name?: StringFilter | string
    email?: StringFilter | string
    phone?: IntFilter | number
    registration_date?: DateTimeFilter | Date | string
    expiration_date?: DateTimeFilter | Date | string
  }

  export type company_accountsOrderByInput = {
    account_id?: SortOrder
    company_id?: SortOrder
    group_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    registration_date?: SortOrder
    expiration_date?: SortOrder
  }

  export type company_accountsWhereUniqueInput = {
    account_id?: number
  }

  export type company_accountsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<company_accountsScalarWhereWithAggregatesInput>
    OR?: Enumerable<company_accountsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<company_accountsScalarWhereWithAggregatesInput>
    account_id?: IntWithAggregatesFilter | number
    company_id?: IntWithAggregatesFilter | number
    group_id?: IntWithAggregatesFilter | number
    first_name?: StringWithAggregatesFilter | string
    last_name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    phone?: IntWithAggregatesFilter | number
    registration_date?: DateTimeWithAggregatesFilter | Date | string
    expiration_date?: DateTimeWithAggregatesFilter | Date | string
  }

  export type subscriptionsWhereInput = {
    AND?: Enumerable<subscriptionsWhereInput>
    OR?: Enumerable<subscriptionsWhereInput>
    NOT?: Enumerable<subscriptionsWhereInput>
    subscription_id?: IntFilter | number
    company_id?: IntFilter | number
    subscription_type?: StringFilter | string
    status?: StringFilter | string
    registration_date?: DateTimeFilter | Date | string
    expiration_date?: DateTimeFilter | Date | string
    companies?: XOR<CompaniesRelationFilter, companiesWhereInput>
  }

  export type subscriptionsOrderByInput = {
    subscription_id?: SortOrder
    company_id?: SortOrder
    subscription_type?: SortOrder
    status?: SortOrder
    registration_date?: SortOrder
    expiration_date?: SortOrder
  }

  export type subscriptionsWhereUniqueInput = {
    subscription_id?: number
    company_id?: number
  }

  export type subscriptionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<subscriptionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<subscriptionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<subscriptionsScalarWhereWithAggregatesInput>
    subscription_id?: IntWithAggregatesFilter | number
    company_id?: IntWithAggregatesFilter | number
    subscription_type?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    registration_date?: DateTimeWithAggregatesFilter | Date | string
    expiration_date?: DateTimeWithAggregatesFilter | Date | string
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    companies?: CompaniesListRelationFilter
  }

  export type usersOrderByInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type usersWhereUniqueInput = {
    id?: number
    IDX_772886e2f1f47b9ceb04a06e20?: usersIDX_772886e2f1f47b9ceb04a06e20CompoundUniqueInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type users_groupsWhereInput = {
    AND?: Enumerable<users_groupsWhereInput>
    OR?: Enumerable<users_groupsWhereInput>
    NOT?: Enumerable<users_groupsWhereInput>
    group_id?: IntFilter | number
    group_name?: StringFilter | string
    group_description?: StringFilter | string
  }

  export type users_groupsOrderByInput = {
    group_id?: SortOrder
    group_name?: SortOrder
    group_description?: SortOrder
  }

  export type users_groupsWhereUniqueInput = {
    group_id?: number
  }

  export type users_groupsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<users_groupsScalarWhereWithAggregatesInput>
    OR?: Enumerable<users_groupsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<users_groupsScalarWhereWithAggregatesInput>
    group_id?: IntWithAggregatesFilter | number
    group_name?: StringWithAggregatesFilter | string
    group_description?: StringWithAggregatesFilter | string
  }

  export type cargosCreateInput = {
    user_id: number
    country_from: string
    country_to: string
    city_from: string
    city_to: string
    address_from: string
    address_to: string
    loading_date: Date | string
    delivery_date: Date | string
    circular_course: number
    weight: number
    size: number
    cargo_type: string
    vehicle_type: string
    registered?: Date | string
  }

  export type cargosUncheckedCreateInput = {
    cargo_id?: number
    user_id: number
    country_from: string
    country_to: string
    city_from: string
    city_to: string
    address_from: string
    address_to: string
    loading_date: Date | string
    delivery_date: Date | string
    circular_course: number
    weight: number
    size: number
    cargo_type: string
    vehicle_type: string
    registered?: Date | string
  }

  export type cargosUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    country_from?: StringFieldUpdateOperationsInput | string
    country_to?: StringFieldUpdateOperationsInput | string
    city_from?: StringFieldUpdateOperationsInput | string
    city_to?: StringFieldUpdateOperationsInput | string
    address_from?: StringFieldUpdateOperationsInput | string
    address_to?: StringFieldUpdateOperationsInput | string
    loading_date?: DateTimeFieldUpdateOperationsInput | Date | string
    delivery_date?: DateTimeFieldUpdateOperationsInput | Date | string
    circular_course?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    cargo_type?: StringFieldUpdateOperationsInput | string
    vehicle_type?: StringFieldUpdateOperationsInput | string
    registered?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type cargosUncheckedUpdateInput = {
    cargo_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    country_from?: StringFieldUpdateOperationsInput | string
    country_to?: StringFieldUpdateOperationsInput | string
    city_from?: StringFieldUpdateOperationsInput | string
    city_to?: StringFieldUpdateOperationsInput | string
    address_from?: StringFieldUpdateOperationsInput | string
    address_to?: StringFieldUpdateOperationsInput | string
    loading_date?: DateTimeFieldUpdateOperationsInput | Date | string
    delivery_date?: DateTimeFieldUpdateOperationsInput | Date | string
    circular_course?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    cargo_type?: StringFieldUpdateOperationsInput | string
    vehicle_type?: StringFieldUpdateOperationsInput | string
    registered?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type cargosCreateManyInput = {
    cargo_id?: number
    user_id: number
    country_from: string
    country_to: string
    city_from: string
    city_to: string
    address_from: string
    address_to: string
    loading_date: Date | string
    delivery_date: Date | string
    circular_course: number
    weight: number
    size: number
    cargo_type: string
    vehicle_type: string
    registered?: Date | string
  }

  export type cargosUpdateManyMutationInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    country_from?: StringFieldUpdateOperationsInput | string
    country_to?: StringFieldUpdateOperationsInput | string
    city_from?: StringFieldUpdateOperationsInput | string
    city_to?: StringFieldUpdateOperationsInput | string
    address_from?: StringFieldUpdateOperationsInput | string
    address_to?: StringFieldUpdateOperationsInput | string
    loading_date?: DateTimeFieldUpdateOperationsInput | Date | string
    delivery_date?: DateTimeFieldUpdateOperationsInput | Date | string
    circular_course?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    cargo_type?: StringFieldUpdateOperationsInput | string
    vehicle_type?: StringFieldUpdateOperationsInput | string
    registered?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type cargosUncheckedUpdateManyInput = {
    cargo_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    country_from?: StringFieldUpdateOperationsInput | string
    country_to?: StringFieldUpdateOperationsInput | string
    city_from?: StringFieldUpdateOperationsInput | string
    city_to?: StringFieldUpdateOperationsInput | string
    address_from?: StringFieldUpdateOperationsInput | string
    address_to?: StringFieldUpdateOperationsInput | string
    loading_date?: DateTimeFieldUpdateOperationsInput | Date | string
    delivery_date?: DateTimeFieldUpdateOperationsInput | Date | string
    circular_course?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    cargo_type?: StringFieldUpdateOperationsInput | string
    vehicle_type?: StringFieldUpdateOperationsInput | string
    registered?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type companiesCreateInput = {
    company_name: string
    country: string
    city: string
    street: string
    owner_first_name: string
    owner_last_name: string
    phone: number
    registrationDate?: Date | string
    expirationDate?: Date | string
    business_type: string
    eik: number
    postcode: string
    users: usersCreateNestedOneWithoutCompaniesInput
    subscriptions?: subscriptionsCreateNestedOneWithoutCompaniesInput
  }

  export type companiesUncheckedCreateInput = {
    company_id?: number
    user_id: number
    company_name: string
    country: string
    city: string
    street: string
    owner_first_name: string
    owner_last_name: string
    phone: number
    registrationDate?: Date | string
    expirationDate?: Date | string
    business_type: string
    eik: number
    postcode: string
    subscriptions?: subscriptionsUncheckedCreateNestedOneWithoutCompaniesInput
  }

  export type companiesUpdateInput = {
    company_name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    owner_first_name?: StringFieldUpdateOperationsInput | string
    owner_last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    business_type?: StringFieldUpdateOperationsInput | string
    eik?: IntFieldUpdateOperationsInput | number
    postcode?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutCompaniesInput
    subscriptions?: subscriptionsUpdateOneWithoutCompaniesInput
  }

  export type companiesUncheckedUpdateInput = {
    company_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    company_name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    owner_first_name?: StringFieldUpdateOperationsInput | string
    owner_last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    business_type?: StringFieldUpdateOperationsInput | string
    eik?: IntFieldUpdateOperationsInput | number
    postcode?: StringFieldUpdateOperationsInput | string
    subscriptions?: subscriptionsUncheckedUpdateOneWithoutCompaniesInput
  }

  export type companiesCreateManyInput = {
    company_id?: number
    user_id: number
    company_name: string
    country: string
    city: string
    street: string
    owner_first_name: string
    owner_last_name: string
    phone: number
    registrationDate?: Date | string
    expirationDate?: Date | string
    business_type: string
    eik: number
    postcode: string
  }

  export type companiesUpdateManyMutationInput = {
    company_name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    owner_first_name?: StringFieldUpdateOperationsInput | string
    owner_last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    business_type?: StringFieldUpdateOperationsInput | string
    eik?: IntFieldUpdateOperationsInput | number
    postcode?: StringFieldUpdateOperationsInput | string
  }

  export type companiesUncheckedUpdateManyInput = {
    company_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    company_name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    owner_first_name?: StringFieldUpdateOperationsInput | string
    owner_last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    business_type?: StringFieldUpdateOperationsInput | string
    eik?: IntFieldUpdateOperationsInput | number
    postcode?: StringFieldUpdateOperationsInput | string
  }

  export type company_accountsCreateInput = {
    company_id: number
    group_id: number
    first_name: string
    last_name: string
    email: string
    phone: number
    registration_date?: Date | string
    expiration_date?: Date | string
  }

  export type company_accountsUncheckedCreateInput = {
    account_id?: number
    company_id: number
    group_id: number
    first_name: string
    last_name: string
    email: string
    phone: number
    registration_date?: Date | string
    expiration_date?: Date | string
  }

  export type company_accountsUpdateInput = {
    company_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    registration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type company_accountsUncheckedUpdateInput = {
    account_id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    registration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type company_accountsCreateManyInput = {
    account_id?: number
    company_id: number
    group_id: number
    first_name: string
    last_name: string
    email: string
    phone: number
    registration_date?: Date | string
    expiration_date?: Date | string
  }

  export type company_accountsUpdateManyMutationInput = {
    company_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    registration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type company_accountsUncheckedUpdateManyInput = {
    account_id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    registration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subscriptionsCreateInput = {
    subscription_type: string
    status: string
    registration_date?: Date | string
    expiration_date?: Date | string
    companies: companiesCreateNestedOneWithoutSubscriptionsInput
  }

  export type subscriptionsUncheckedCreateInput = {
    subscription_id?: number
    company_id: number
    subscription_type: string
    status: string
    registration_date?: Date | string
    expiration_date?: Date | string
  }

  export type subscriptionsUpdateInput = {
    subscription_type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneRequiredWithoutSubscriptionsInput
  }

  export type subscriptionsUncheckedUpdateInput = {
    subscription_id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
    subscription_type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subscriptionsCreateManyInput = {
    subscription_id?: number
    company_id: number
    subscription_type: string
    status: string
    registration_date?: Date | string
    expiration_date?: Date | string
  }

  export type subscriptionsUpdateManyMutationInput = {
    subscription_type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subscriptionsUncheckedUpdateManyInput = {
    subscription_id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
    subscription_type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateInput = {
    username: string
    email: string
    password: string
    companies?: companiesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    password: string
    companies?: companiesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    companies?: companiesUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    companies?: companiesUncheckedUpdateManyWithoutUsersInput
  }

  export type usersCreateManyInput = {
    id?: number
    username: string
    email: string
    password: string
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type users_groupsCreateInput = {
    group_name: string
    group_description: string
  }

  export type users_groupsUncheckedCreateInput = {
    group_id?: number
    group_name: string
    group_description: string
  }

  export type users_groupsUpdateInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    group_description?: StringFieldUpdateOperationsInput | string
  }

  export type users_groupsUncheckedUpdateInput = {
    group_id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    group_description?: StringFieldUpdateOperationsInput | string
  }

  export type users_groupsCreateManyInput = {
    group_id?: number
    group_name: string
    group_description: string
  }

  export type users_groupsUpdateManyMutationInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    group_description?: StringFieldUpdateOperationsInput | string
  }

  export type users_groupsUncheckedUpdateManyInput = {
    group_id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    group_description?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    count?: NestedIntFilter
    min?: NestedDateTimeFilter
    max?: NestedDateTimeFilter
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type SubscriptionsRelationFilter = {
    is?: subscriptionsWhereInput | null
    isNot?: subscriptionsWhereInput | null
  }

  export type CompaniesRelationFilter = {
    is?: companiesWhereInput
    isNot?: companiesWhereInput
  }

  export type CompaniesListRelationFilter = {
    every?: companiesWhereInput
    some?: companiesWhereInput
    none?: companiesWhereInput
  }

  export type usersIDX_772886e2f1f47b9ceb04a06e20CompoundUniqueInput = {
    username: string
    email: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usersCreateNestedOneWithoutCompaniesInput = {
    create?: XOR<usersCreateWithoutCompaniesInput, usersUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: usersCreateOrConnectWithoutCompaniesInput
    connect?: usersWhereUniqueInput
  }

  export type subscriptionsCreateNestedOneWithoutCompaniesInput = {
    create?: XOR<subscriptionsCreateWithoutCompaniesInput, subscriptionsUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: subscriptionsCreateOrConnectWithoutCompaniesInput
    connect?: subscriptionsWhereUniqueInput
  }

  export type subscriptionsUncheckedCreateNestedOneWithoutCompaniesInput = {
    create?: XOR<subscriptionsCreateWithoutCompaniesInput, subscriptionsUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: subscriptionsCreateOrConnectWithoutCompaniesInput
    connect?: subscriptionsWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutCompaniesInput = {
    create?: XOR<usersCreateWithoutCompaniesInput, usersUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: usersCreateOrConnectWithoutCompaniesInput
    upsert?: usersUpsertWithoutCompaniesInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutCompaniesInput, usersUncheckedUpdateWithoutCompaniesInput>
  }

  export type subscriptionsUpdateOneWithoutCompaniesInput = {
    create?: XOR<subscriptionsCreateWithoutCompaniesInput, subscriptionsUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: subscriptionsCreateOrConnectWithoutCompaniesInput
    upsert?: subscriptionsUpsertWithoutCompaniesInput
    connect?: subscriptionsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<subscriptionsUpdateWithoutCompaniesInput, subscriptionsUncheckedUpdateWithoutCompaniesInput>
  }

  export type subscriptionsUncheckedUpdateOneWithoutCompaniesInput = {
    create?: XOR<subscriptionsCreateWithoutCompaniesInput, subscriptionsUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: subscriptionsCreateOrConnectWithoutCompaniesInput
    upsert?: subscriptionsUpsertWithoutCompaniesInput
    connect?: subscriptionsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<subscriptionsUpdateWithoutCompaniesInput, subscriptionsUncheckedUpdateWithoutCompaniesInput>
  }

  export type companiesCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<companiesCreateWithoutSubscriptionsInput, companiesUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: companiesCreateOrConnectWithoutSubscriptionsInput
    connect?: companiesWhereUniqueInput
  }

  export type companiesUpdateOneRequiredWithoutSubscriptionsInput = {
    create?: XOR<companiesCreateWithoutSubscriptionsInput, companiesUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: companiesCreateOrConnectWithoutSubscriptionsInput
    upsert?: companiesUpsertWithoutSubscriptionsInput
    connect?: companiesWhereUniqueInput
    update?: XOR<companiesUpdateWithoutSubscriptionsInput, companiesUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type companiesCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<companiesCreateWithoutUsersInput>, Enumerable<companiesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<companiesCreateOrConnectWithoutUsersInput>
    createMany?: companiesCreateManyUsersInputEnvelope
    connect?: Enumerable<companiesWhereUniqueInput>
  }

  export type companiesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<companiesCreateWithoutUsersInput>, Enumerable<companiesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<companiesCreateOrConnectWithoutUsersInput>
    createMany?: companiesCreateManyUsersInputEnvelope
    connect?: Enumerable<companiesWhereUniqueInput>
  }

  export type companiesUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<companiesCreateWithoutUsersInput>, Enumerable<companiesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<companiesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<companiesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: companiesCreateManyUsersInputEnvelope
    connect?: Enumerable<companiesWhereUniqueInput>
    set?: Enumerable<companiesWhereUniqueInput>
    disconnect?: Enumerable<companiesWhereUniqueInput>
    delete?: Enumerable<companiesWhereUniqueInput>
    update?: Enumerable<companiesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<companiesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<companiesScalarWhereInput>
  }

  export type companiesUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<companiesCreateWithoutUsersInput>, Enumerable<companiesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<companiesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<companiesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: companiesCreateManyUsersInputEnvelope
    connect?: Enumerable<companiesWhereUniqueInput>
    set?: Enumerable<companiesWhereUniqueInput>
    disconnect?: Enumerable<companiesWhereUniqueInput>
    delete?: Enumerable<companiesWhereUniqueInput>
    update?: Enumerable<companiesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<companiesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<companiesScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    count?: NestedIntFilter
    min?: NestedDateTimeFilter
    max?: NestedDateTimeFilter
  }

  export type usersCreateWithoutCompaniesInput = {
    username: string
    email: string
    password: string
  }

  export type usersUncheckedCreateWithoutCompaniesInput = {
    id?: number
    username: string
    email: string
    password: string
  }

  export type usersCreateOrConnectWithoutCompaniesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCompaniesInput, usersUncheckedCreateWithoutCompaniesInput>
  }

  export type subscriptionsCreateWithoutCompaniesInput = {
    subscription_type: string
    status: string
    registration_date?: Date | string
    expiration_date?: Date | string
  }

  export type subscriptionsUncheckedCreateWithoutCompaniesInput = {
    subscription_id?: number
    subscription_type: string
    status: string
    registration_date?: Date | string
    expiration_date?: Date | string
  }

  export type subscriptionsCreateOrConnectWithoutCompaniesInput = {
    where: subscriptionsWhereUniqueInput
    create: XOR<subscriptionsCreateWithoutCompaniesInput, subscriptionsUncheckedCreateWithoutCompaniesInput>
  }

  export type usersUpsertWithoutCompaniesInput = {
    update: XOR<usersUpdateWithoutCompaniesInput, usersUncheckedUpdateWithoutCompaniesInput>
    create: XOR<usersCreateWithoutCompaniesInput, usersUncheckedCreateWithoutCompaniesInput>
  }

  export type usersUpdateWithoutCompaniesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateWithoutCompaniesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type subscriptionsUpsertWithoutCompaniesInput = {
    update: XOR<subscriptionsUpdateWithoutCompaniesInput, subscriptionsUncheckedUpdateWithoutCompaniesInput>
    create: XOR<subscriptionsCreateWithoutCompaniesInput, subscriptionsUncheckedCreateWithoutCompaniesInput>
  }

  export type subscriptionsUpdateWithoutCompaniesInput = {
    subscription_type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subscriptionsUncheckedUpdateWithoutCompaniesInput = {
    subscription_id?: IntFieldUpdateOperationsInput | number
    subscription_type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type companiesCreateWithoutSubscriptionsInput = {
    company_name: string
    country: string
    city: string
    street: string
    owner_first_name: string
    owner_last_name: string
    phone: number
    registrationDate?: Date | string
    expirationDate?: Date | string
    business_type: string
    eik: number
    postcode: string
    users: usersCreateNestedOneWithoutCompaniesInput
  }

  export type companiesUncheckedCreateWithoutSubscriptionsInput = {
    company_id?: number
    user_id: number
    company_name: string
    country: string
    city: string
    street: string
    owner_first_name: string
    owner_last_name: string
    phone: number
    registrationDate?: Date | string
    expirationDate?: Date | string
    business_type: string
    eik: number
    postcode: string
  }

  export type companiesCreateOrConnectWithoutSubscriptionsInput = {
    where: companiesWhereUniqueInput
    create: XOR<companiesCreateWithoutSubscriptionsInput, companiesUncheckedCreateWithoutSubscriptionsInput>
  }

  export type companiesUpsertWithoutSubscriptionsInput = {
    update: XOR<companiesUpdateWithoutSubscriptionsInput, companiesUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<companiesCreateWithoutSubscriptionsInput, companiesUncheckedCreateWithoutSubscriptionsInput>
  }

  export type companiesUpdateWithoutSubscriptionsInput = {
    company_name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    owner_first_name?: StringFieldUpdateOperationsInput | string
    owner_last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    business_type?: StringFieldUpdateOperationsInput | string
    eik?: IntFieldUpdateOperationsInput | number
    postcode?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutCompaniesInput
  }

  export type companiesUncheckedUpdateWithoutSubscriptionsInput = {
    company_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    company_name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    owner_first_name?: StringFieldUpdateOperationsInput | string
    owner_last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    business_type?: StringFieldUpdateOperationsInput | string
    eik?: IntFieldUpdateOperationsInput | number
    postcode?: StringFieldUpdateOperationsInput | string
  }

  export type companiesCreateWithoutUsersInput = {
    company_name: string
    country: string
    city: string
    street: string
    owner_first_name: string
    owner_last_name: string
    phone: number
    registrationDate?: Date | string
    expirationDate?: Date | string
    business_type: string
    eik: number
    postcode: string
    subscriptions?: subscriptionsCreateNestedOneWithoutCompaniesInput
  }

  export type companiesUncheckedCreateWithoutUsersInput = {
    company_id?: number
    company_name: string
    country: string
    city: string
    street: string
    owner_first_name: string
    owner_last_name: string
    phone: number
    registrationDate?: Date | string
    expirationDate?: Date | string
    business_type: string
    eik: number
    postcode: string
    subscriptions?: subscriptionsUncheckedCreateNestedOneWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutUsersInput = {
    where: companiesWhereUniqueInput
    create: XOR<companiesCreateWithoutUsersInput, companiesUncheckedCreateWithoutUsersInput>
  }

  export type companiesCreateManyUsersInputEnvelope = {
    data: Enumerable<companiesCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type companiesUpsertWithWhereUniqueWithoutUsersInput = {
    where: companiesWhereUniqueInput
    update: XOR<companiesUpdateWithoutUsersInput, companiesUncheckedUpdateWithoutUsersInput>
    create: XOR<companiesCreateWithoutUsersInput, companiesUncheckedCreateWithoutUsersInput>
  }

  export type companiesUpdateWithWhereUniqueWithoutUsersInput = {
    where: companiesWhereUniqueInput
    data: XOR<companiesUpdateWithoutUsersInput, companiesUncheckedUpdateWithoutUsersInput>
  }

  export type companiesUpdateManyWithWhereWithoutUsersInput = {
    where: companiesScalarWhereInput
    data: XOR<companiesUpdateManyMutationInput, companiesUncheckedUpdateManyWithoutCompaniesInput>
  }

  export type companiesScalarWhereInput = {
    AND?: Enumerable<companiesScalarWhereInput>
    OR?: Enumerable<companiesScalarWhereInput>
    NOT?: Enumerable<companiesScalarWhereInput>
    company_id?: IntFilter | number
    user_id?: IntFilter | number
    company_name?: StringFilter | string
    country?: StringFilter | string
    city?: StringFilter | string
    street?: StringFilter | string
    owner_first_name?: StringFilter | string
    owner_last_name?: StringFilter | string
    phone?: IntFilter | number
    registrationDate?: DateTimeFilter | Date | string
    expirationDate?: DateTimeFilter | Date | string
    business_type?: StringFilter | string
    eik?: IntFilter | number
    postcode?: StringFilter | string
  }

  export type companiesCreateManyUsersInput = {
    company_id?: number
    company_name: string
    country: string
    city: string
    street: string
    owner_first_name: string
    owner_last_name: string
    phone: number
    registrationDate?: Date | string
    expirationDate?: Date | string
    business_type: string
    eik: number
    postcode: string
  }

  export type companiesUpdateWithoutUsersInput = {
    company_name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    owner_first_name?: StringFieldUpdateOperationsInput | string
    owner_last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    business_type?: StringFieldUpdateOperationsInput | string
    eik?: IntFieldUpdateOperationsInput | number
    postcode?: StringFieldUpdateOperationsInput | string
    subscriptions?: subscriptionsUpdateOneWithoutCompaniesInput
  }

  export type companiesUncheckedUpdateWithoutUsersInput = {
    company_id?: IntFieldUpdateOperationsInput | number
    company_name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    owner_first_name?: StringFieldUpdateOperationsInput | string
    owner_last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    business_type?: StringFieldUpdateOperationsInput | string
    eik?: IntFieldUpdateOperationsInput | number
    postcode?: StringFieldUpdateOperationsInput | string
    subscriptions?: subscriptionsUncheckedUpdateOneWithoutCompaniesInput
  }

  export type companiesUncheckedUpdateManyWithoutCompaniesInput = {
    company_id?: IntFieldUpdateOperationsInput | number
    company_name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    owner_first_name?: StringFieldUpdateOperationsInput | string
    owner_last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    business_type?: StringFieldUpdateOperationsInput | string
    eik?: IntFieldUpdateOperationsInput | number
    postcode?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}